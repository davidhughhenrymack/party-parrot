[
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "FileType",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "FileType",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "FileType",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "ArgumentParser",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "FileType",
        "importPath": "argparse",
        "description": "argparse",
        "isExtraImport": true,
        "detail": "argparse",
        "documentation": {}
    },
    {
        "label": "io",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "io",
        "description": "io",
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "StreamHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "StreamHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "StreamHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "getLogger",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Formatter",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "StreamHandler",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "ERROR",
        "importPath": "logging",
        "description": "logging",
        "isExtraImport": true,
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "exit",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "modules",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "platform",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stderr",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "stdout",
        "importPath": "sys",
        "description": "sys",
        "isExtraImport": true,
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "fill",
        "importPath": "textwrap",
        "description": "textwrap",
        "isExtraImport": true,
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "format_exc",
        "importPath": "traceback",
        "description": "traceback",
        "isExtraImport": true,
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "FtdiLogger",
        "importPath": "pyftdi",
        "description": "pyftdi",
        "isExtraImport": true,
        "detail": "pyftdi",
        "documentation": {}
    },
    {
        "label": "FtdiLogger",
        "importPath": "pyftdi",
        "description": "pyftdi",
        "isExtraImport": true,
        "detail": "pyftdi",
        "documentation": {}
    },
    {
        "label": "FtdiLogger",
        "importPath": "pyftdi",
        "description": "pyftdi",
        "isExtraImport": true,
        "detail": "pyftdi",
        "documentation": {}
    },
    {
        "label": "FtdiLogger",
        "importPath": "pyftdi",
        "description": "pyftdi",
        "isExtraImport": true,
        "detail": "pyftdi",
        "documentation": {}
    },
    {
        "label": "FtdiEeprom",
        "importPath": "pyftdi.eeprom",
        "description": "pyftdi.eeprom",
        "isExtraImport": true,
        "detail": "pyftdi.eeprom",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "add_custom_devices",
        "importPath": "pyftdi.misc",
        "description": "pyftdi.misc",
        "isExtraImport": true,
        "detail": "pyftdi.misc",
        "documentation": {}
    },
    {
        "label": "hexdump",
        "importPath": "pyftdi.misc",
        "description": "pyftdi.misc",
        "isExtraImport": true,
        "detail": "pyftdi.misc",
        "documentation": {}
    },
    {
        "label": "add_custom_devices",
        "importPath": "pyftdi.misc",
        "description": "pyftdi.misc",
        "isExtraImport": true,
        "detail": "pyftdi.misc",
        "documentation": {}
    },
    {
        "label": "add_custom_devices",
        "importPath": "pyftdi.misc",
        "description": "pyftdi.misc",
        "isExtraImport": true,
        "detail": "pyftdi.misc",
        "documentation": {}
    },
    {
        "label": "to_bps",
        "importPath": "pyftdi.misc",
        "description": "pyftdi.misc",
        "isExtraImport": true,
        "detail": "pyftdi.misc",
        "documentation": {}
    },
    {
        "label": "add_custom_devices",
        "importPath": "pyftdi.misc",
        "description": "pyftdi.misc",
        "isExtraImport": true,
        "detail": "pyftdi.misc",
        "documentation": {}
    },
    {
        "label": "I2cController",
        "importPath": "pyftdi.i2c",
        "description": "pyftdi.i2c",
        "isExtraImport": true,
        "detail": "pyftdi.i2c",
        "documentation": {}
    },
    {
        "label": "I2cNackError",
        "importPath": "pyftdi.i2c",
        "description": "pyftdi.i2c",
        "isExtraImport": true,
        "detail": "pyftdi.i2c",
        "documentation": {}
    },
    {
        "label": "register",
        "importPath": "atexit",
        "description": "atexit",
        "isExtraImport": true,
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "environ",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "linesep",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "stat",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "search",
        "importPath": "re",
        "description": "re",
        "isExtraImport": true,
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Event",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "interrupt_main",
        "importPath": "_thread",
        "description": "_thread",
        "isExtraImport": true,
        "detail": "_thread",
        "documentation": {}
    },
    {
        "label": "Terminal",
        "importPath": "pyftdi.term",
        "description": "pyftdi.term",
        "isExtraImport": true,
        "detail": "pyftdi.term",
        "documentation": {}
    },
    {
        "label": "networkx",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx",
        "description": "networkx",
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "networkx",
        "description": "networkx",
        "isExtraImport": true,
        "detail": "networkx",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "mlab",
        "importPath": "mayavi",
        "description": "mayavi",
        "isExtraImport": true,
        "detail": "mayavi",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "Axes3D",
        "importPath": "mpl_toolkits.mplot3d",
        "description": "mpl_toolkits.mplot3d",
        "isExtraImport": true,
        "detail": "mpl_toolkits.mplot3d",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "sample",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "hierarchy",
        "importPath": "scipy.cluster",
        "description": "scipy.cluster",
        "isExtraImport": true,
        "detail": "scipy.cluster",
        "documentation": {}
    },
    {
        "label": "distance",
        "importPath": "scipy.spatial",
        "description": "scipy.spatial",
        "isExtraImport": true,
        "detail": "scipy.spatial",
        "documentation": {}
    },
    {
        "label": "bipartite",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "approximation",
        "importPath": "networkx.algorithms",
        "description": "networkx.algorithms",
        "isExtraImport": true,
        "detail": "networkx.algorithms",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "Pool",
        "importPath": "multiprocessing",
        "description": "multiprocessing",
        "isExtraImport": true,
        "detail": "multiprocessing",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "seaborn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "seaborn",
        "description": "seaborn",
        "detail": "seaborn",
        "documentation": {}
    },
    {
        "label": "PIL",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "PIL",
        "description": "PIL",
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "itemgetter",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "numpy.linalg",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy.linalg",
        "description": "numpy.linalg",
        "detail": "numpy.linalg",
        "documentation": {}
    },
    {
        "label": "gzip",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gzip",
        "description": "gzip",
        "detail": "gzip",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "zipfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zipfile",
        "description": "zipfile",
        "detail": "zipfile",
        "documentation": {}
    },
    {
        "label": "networkx.algorithms.approximation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "networkx.algorithms.approximation",
        "description": "networkx.algorithms.approximation",
        "detail": "networkx.algorithms.approximation",
        "documentation": {}
    },
    {
        "label": "getaddresses",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "parseaddr",
        "importPath": "email.utils",
        "description": "email.utils",
        "isExtraImport": true,
        "detail": "email.utils",
        "documentation": {}
    },
    {
        "label": "mailbox",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "mailbox",
        "description": "mailbox",
        "detail": "mailbox",
        "documentation": {}
    },
    {
        "label": "urllib.request",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib.request",
        "description": "urllib.request",
        "detail": "urllib.request",
        "documentation": {}
    },
    {
        "label": "string",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "string",
        "description": "string",
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "ascii_lowercase",
        "importPath": "string",
        "description": "string",
        "isExtraImport": true,
        "detail": "string",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Lerpable",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "LerpAnimator",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp_color",
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "isExtraImport": true,
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "LedParGroup",
        "importPath": "parrot.interpreters.led_par_group",
        "description": "parrot.interpreters.led_par_group",
        "isExtraImport": true,
        "detail": "parrot.interpreters.led_par_group",
        "documentation": {}
    },
    {
        "label": "LedParSlowRespond",
        "importPath": "parrot.interpreters.led_par_group",
        "description": "parrot.interpreters.led_par_group",
        "isExtraImport": true,
        "detail": "parrot.interpreters.led_par_group",
        "documentation": {}
    },
    {
        "label": "MotionstripSlowRespond",
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionstripWaveform",
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "patch_bay",
        "importPath": "parrot.patch.patch_bay",
        "description": "parrot.patch.patch_bay",
        "isExtraImport": true,
        "detail": "parrot.patch.patch_bay",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160",
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "isExtraImport": true,
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160",
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "isExtraImport": true,
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160",
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "isExtraImport": true,
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.patch.led_par",
        "description": "parrot.patch.led_par",
        "isExtraImport": true,
        "detail": "parrot.patch.led_par",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.patch.led_par",
        "description": "parrot.patch.led_par",
        "isExtraImport": true,
        "detail": "parrot.patch.led_par",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.patch.led_par",
        "description": "parrot.patch.led_par",
        "isExtraImport": true,
        "detail": "parrot.patch.led_par",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "color_to_rgbw",
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "color_schemes",
        "importPath": "parrot.director.schemes",
        "description": "parrot.director.schemes",
        "isExtraImport": true,
        "detail": "parrot.director.schemes",
        "documentation": {}
    },
    {
        "label": "MoverBeat",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpretorCategory",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.patch.base",
        "description": "parrot.patch.base",
        "isExtraImport": true,
        "detail": "parrot.patch.base",
        "documentation": {}
    },
    {
        "label": "clamp",
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "isExtraImport": true,
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "get_controller",
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "isExtraImport": true,
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "dmx_clamp",
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "isExtraImport": true,
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "pyaudio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyaudio",
        "description": "pyaudio",
        "detail": "pyaudio",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "HDEMUCS_HIGH_MUSDB_PLUS",
        "importPath": "torchaudio.pipelines",
        "description": "torchaudio.pipelines",
        "isExtraImport": true,
        "detail": "torchaudio.pipelines",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "Director",
        "importPath": "director.director",
        "description": "director.director",
        "isExtraImport": true,
        "detail": "director.director",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "director.director",
        "description": "director.director",
        "isExtraImport": true,
        "detail": "director.director",
        "documentation": {}
    },
    {
        "label": "get_controller",
        "importPath": "utils.dmx_utils",
        "description": "utils.dmx_utils",
        "isExtraImport": true,
        "detail": "utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "DMXEnttecPro",
        "description": "DMXEnttecPro",
        "isExtraImport": true,
        "detail": "DMXEnttecPro",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "DMXEnttecPro",
        "description": "DMXEnttecPro",
        "isExtraImport": true,
        "detail": "DMXEnttecPro",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "LogNorm",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "LogNorm",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "RegularGridInterpolator",
        "importPath": "scipy.interpolate",
        "description": "scipy.interpolate",
        "isExtraImport": true,
        "detail": "scipy.interpolate",
        "documentation": {}
    },
    {
        "label": "Director",
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "isExtraImport": true,
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "isExtraImport": true,
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "Separator",
        "importPath": "spleeter.separator",
        "description": "spleeter.separator",
        "isExtraImport": true,
        "detail": "spleeter.separator",
        "documentation": {}
    },
    {
        "label": "ColorRGB",
        "importPath": "colorist",
        "description": "colorist",
        "isExtraImport": true,
        "detail": "colorist",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "MockDmxController",
        "importPath": "parrot.utils.mock_controller",
        "description": "parrot.utils.mock_controller",
        "isExtraImport": true,
        "detail": "parrot.utils.mock_controller",
        "documentation": {}
    },
    {
        "label": "MicToDmxBasic",
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "isExtraImport": true,
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "Demucs",
        "importPath": "listeners.demucs",
        "description": "listeners.demucs",
        "isExtraImport": true,
        "detail": "listeners.demucs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.ftconf",
        "description": ".venv.bin.ftconf",
        "peekOfCode": "def main():\n    \"\"\"Main routine\"\"\"\n    debug = False\n    try:\n        argparser = ArgumentParser(description=modules[__name__].__doc__)\n        argparser.add_argument('device', nargs='?', default='ftdi:///?',\n                               help='serial port device name')\n        files = argparser.add_argument_group(title='Files')\n        files.add_argument('-i', '--input', type=FileType('rt'),\n                           help='input ini file to load EEPROM content')",
        "detail": ".venv.bin.ftconf",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.ftdi_urls",
        "description": ".venv.bin.ftdi_urls",
        "peekOfCode": "def main():\n    \"\"\"Entry point.\"\"\"\n    debug = False\n    try:\n        argparser = ArgumentParser(description=modules[__name__].__doc__)\n        argparser.add_argument('-P', '--vidpid', action='append',\n                               help='specify a custom VID:PID device ID, '\n                                    'may be repeated')\n        argparser.add_argument('-V', '--virtual', type=FileType('r'),\n                               help='use a virtual device, specified as YaML')",
        "detail": ".venv.bin.ftdi_urls",
        "documentation": {}
    },
    {
        "label": "I2cBusScanner",
        "kind": 6,
        "importPath": ".venv.bin.i2cscan",
        "description": ".venv.bin.i2cscan",
        "peekOfCode": "class I2cBusScanner:\n    \"\"\"Scan I2C bus to find slave.\n       Emit the I2C address message, but no data. Detect any ACK on each valid\n       address.\n    \"\"\"\n    SMB_READ_RANGE = list(range(0x30, 0x38)) + list(range(0x50, 0x60))\n    HIGHEST_I2C_SLAVE_ADDRESS = 0x78\n    @classmethod\n    def scan(cls, url: str, smb_mode: bool = True) -> None:\n        \"\"\"Scan an I2C bus to detect slave device.",
        "detail": ".venv.bin.i2cscan",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.i2cscan",
        "description": ".venv.bin.i2cscan",
        "peekOfCode": "def main():\n    \"\"\"Entry point.\"\"\"\n    debug = False\n    try:\n        argparser = ArgumentParser(description=modules[__name__].__doc__)\n        argparser.add_argument('device', nargs='?', default='ftdi:///?',\n                               help='serial port device name')\n        argparser.add_argument('-S', '--no-smb', action='store_true',\n                               default=False,\n                               help='use regular I2C mode vs. SMBbus scan')",
        "detail": ".venv.bin.i2cscan",
        "documentation": {}
    },
    {
        "label": "MiniTerm",
        "kind": 6,
        "importPath": ".venv.bin.pyterm",
        "description": ".venv.bin.pyterm",
        "peekOfCode": "class MiniTerm:\n    \"\"\"A mini serial terminal to demonstrate pyserial extensions\"\"\"\n    DEFAULT_BAUDRATE = 115200\n    def __init__(self, device, baudrate=None, parity=None, rtscts=False,\n                 debug=False):\n        self._terminal = Terminal()\n        self._device = device\n        self._baudrate = baudrate or self.DEFAULT_BAUDRATE\n        self._port = self._open_port(self._device, self._baudrate, parity,\n                                     rtscts, debug)",
        "detail": ".venv.bin.pyterm",
        "documentation": {}
    },
    {
        "label": "get_default_device",
        "kind": 2,
        "importPath": ".venv.bin.pyterm",
        "description": ".venv.bin.pyterm",
        "peekOfCode": "def get_default_device() -> str:\n    \"\"\"Return the default comm device, depending on the host/OS.\"\"\"\n    envdev = environ.get('FTDI_DEVICE', '')\n    if envdev:\n        return envdev\n    if platform == 'win32':\n        device = 'COM1'\n    elif platform == 'darwin':\n        device = '/dev/cu.usbserial'\n    elif platform == 'linux':",
        "detail": ".venv.bin.pyterm",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": ".venv.bin.pyterm",
        "description": ".venv.bin.pyterm",
        "peekOfCode": "def main():\n    \"\"\"Main routine\"\"\"\n    debug = False\n    try:\n        default_device = get_default_device()\n        argparser = ArgumentParser(description=modules[__name__].__doc__)\n        argparser.add_argument('-f', '--fullmode', dest='fullmode',\n                                   action='store_true',\n                                   help='use full terminal mode, exit with '\n                                        '[Ctrl]+B')",
        "detail": ".venv.bin.pyterm",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "H = nx.cycle_graph(20)\n# reorder nodes from 0,len(G)-1\nG = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "G = nx.convert_node_labels_to_integers(H)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=1001)\n# numpy array of x,y,z positions in sorted node order\nxyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "xyz = np.array([pos[v] for v in sorted(G)])\n# scalar colors\nscalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "scalars",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "scalars = np.array(list(G.nodes())) + 5\nmlab.figure()\npts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts = mlab.points3d(\n    xyz[:, 0],\n    xyz[:, 1],\n    xyz[:, 2],\n    scalars,\n    scale_factor=0.1,\n    scale_mode=\"none\",\n    colormap=\"Blues\",\n    resolution=20,\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "pts.mlab_source.dataset.lines",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "pts.mlab_source.dataset.lines = np.array(list(G.edges()))\ntube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "tube",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "peekOfCode": "tube = mlab.pipeline.tube(pts, tube_radius=0.01)\nmlab.pipeline.surface(tube, color=(0.8, 0.8, 0.8))\nmlab.orientation_axes()",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.mayavi2_spring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "G = nx.cycle_graph(20)\n# 3d spring layout\npos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "pos = nx.spring_layout(G, dim=3, seed=779)\n# Extract node and edge positions from the layout\nnode_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "node_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "node_xyz = np.array([pos[v] for v in sorted(G)])\nedge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "edge_xyz",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "edge_xyz = np.array([(pos[u], pos[v]) for u, v in G.edges()])\n# Create the 3D figure\nfig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "fig = plt.figure()\nax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "description": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "peekOfCode": "ax = fig.add_subplot(111, projection=\"3d\")\n# Plot the nodes - alpha is scaled by \"depth\" automatically\nax.scatter(*node_xyz.T, s=100, ec=\"w\")\n# Plot the edges\nfor vizedge in edge_xyz:\n    ax.plot(*vizedge.T, color=\"tab:gray\")\ndef _format_axes(ax):\n    \"\"\"Visualization options for the 3D axes.\"\"\"\n    # Turn gridlines off\n    ax.grid(False)",
        "detail": ".venv.share.doc.networkx-3.1.examples.3d_drawing.plot_basic",
        "documentation": {}
    },
    {
        "label": "progressive_widening_search",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def progressive_widening_search(G, source, value, condition, initial_width=1):\n    \"\"\"Progressive widening beam search to find a node.\n    The progressive widening beam search involves a repeated beam\n    search, starting with a small beam width then extending to\n    progressively larger beam widths if the target node is not\n    found. This implementation simply returns the first node found that\n    matches the termination condition.\n    `G` is a NetworkX graph.\n    `source` is a node in the graph. The search for the node of interest\n    begins here and extends only to those nodes in the (weakly)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "has_high_centrality",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "def has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "seed = 89\nG = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.5, seed=seed)\ncentrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "centrality = nx.eigenvector_centrality(G)\navg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "avg_centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "avg_centrality = sum(centrality.values()) / len(G)\ndef has_high_centrality(v):\n    return centrality[v] >= avg_centrality\nsource = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "source",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "source = 0\nvalue = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "value",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "value = centrality.get\ncondition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "condition",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "condition = has_high_centrality\nfound_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "found_node",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "found_node = progressive_widening_search(G, source, value, condition)\nc = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "c = centrality[found_node]\nprint(f\"found node {found_node} with centrality {c}\")\n# Draw graph\npos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\noptions = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "peekOfCode": "options = {\n    \"node_color\": \"blue\",\n    \"node_size\": 20,\n    \"edge_color\": \"grey\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw(G, pos, **options)\n# Draw node with high centrality as large and red\nnx.draw_networkx_nodes(G, pos, nodelist=[found_node], node_size=100, node_color=\"r\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_beam_search",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "G = nx.read_edgelist(\"WormNet.v3.benchmark.txt\")\n# remove randomly selected nodes (to make example fast)\nnum_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "num_to_remove",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "num_to_remove = int(len(G) / 1.5)\nnodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "nodes = sample(list(G.nodes), num_to_remove)\nG.remove_nodes_from(nodes)\n# remove low-degree nodes\nlow_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "low_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "low_degree = [n for n, d in G.degree() if d < 10]\nG.remove_nodes_from(low_degree)\n# largest connected component\ncomponents = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "components",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "components = nx.connected_components(G)\nlargest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "largest_component",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "largest_component = max(components, key=len)\nH = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "H = G.subgraph(largest_component)\n# compute centrality\ncentrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "centrality",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "centrality = nx.betweenness_centrality(H, k=10, endpoints=True)\n# compute community structure\nlpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "lpc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "lpc = nx.community.label_propagation_communities(H)\ncommunity_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "community_index",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "community_index = {n: i for i, com in enumerate(lpc) for n in com}\n#### draw graph ####\nfig, ax = plt.subplots(figsize=(20, 15))\npos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "pos = nx.spring_layout(H, k=0.15, seed=4572321)\nnode_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_color = [community_index[n] for n in H]\nnode_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "node_size = [v * 20000 for v in centrality.values()]\nnx.draw_networkx(\n    H,\n    pos=pos,\n    with_labels=False,\n    node_color=node_color,\n    node_size=node_size,\n    edge_color=\"gainsboro\",\n    alpha=0.4,\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font = {\"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 20}\nax.set_title(\"Gene functional association network (C. elegans)\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"node color = community structure\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_betweenness_centrality",
        "documentation": {}
    },
    {
        "label": "create_hc",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "def create_hc(G):\n    \"\"\"Creates hierarchical cluster of graph G from distance matrix\"\"\"\n    path_length = nx.all_pairs_shortest_path_length(G)\n    distances = np.zeros((len(G), len(G)))\n    for u, p in path_length:\n        for v, d in p.items():\n            distances[u][v] = d\n    # Create hierarchical cluster\n    Y = distance.squareform(distances)\n    Z = hierarchy.complete(Y)  # Creates HC using farthest point linkage",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "G = nx.read_edgelist(\"hartford_drug.edgelist\")\n# Extract largest connected component into graph H\nH = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = G.subgraph(next(nx.connected_components(G)))\n# Makes life easier to have consecutively labeled integer nodes\nH = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "H = nx.convert_node_labels_to_integers(H)\n# Create partitions with hierarchical clustering\npartitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "partitions",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "partitions = create_hc(H)\n# Build blockmodel graph\nBM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "BM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "BM = nx.quotient_graph(H, partitions, relabel=True)\n# Draw original graph\npos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "pos = nx.spring_layout(H, iterations=100, seed=83)  # Seed for reproducibility\nplt.subplot(211)\nnx.draw(H, pos, with_labels=False, node_size=10)\n# Draw block model with weighted edges and nodes sized by number of internal nodes\nnode_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "node_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "node_size = [BM.nodes[x][\"nnodes\"] * 10 for x in BM.nodes()]\nedge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "edge_width",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "edge_width = [(2 * d[\"weight\"]) for (u, v, d) in BM.edges(data=True)]\n# Set positions to mean of positions of internal nodes from original graph\nposBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "posBM",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "peekOfCode": "posBM = {}\nfor n in BM:\n    xy = np.array([pos[u] for u in BM.nodes[n][\"graph\"]])\n    posBM[n] = xy.mean(axis=0)\nplt.subplot(212)\nnx.draw(BM, posBM, node_size=node_size, width=edge_width, with_labels=False)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_blockmodel",
        "documentation": {}
    },
    {
        "label": "circuit_to_formula",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def circuit_to_formula(circuit):\n    # Convert the circuit to an equivalent formula.\n    formula = nx.dag_to_branching(circuit)\n    # Transfer the operator or variable labels for each node from the\n    # circuit to the formula.\n    for v in formula:\n        source = formula.nodes[v][\"source\"]\n        formula.nodes[v][\"label\"] = circuit.nodes[source][\"label\"]\n    return formula\ndef formula_to_string(formula):",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula_to_string",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "def formula_to_string(formula):\n    def _to_string(formula, root):\n        # If there are no children, this is a variable node.\n        label = formula.nodes[root][\"label\"]\n        if not formula[root]:\n            return label\n        # Otherwise, this is an operator.\n        children = formula[root]\n        # If one child, the label must be a NOT operator.\n        if len(children) == 1:",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "circuit",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "circuit = nx.DiGraph()\n# Layer 0\ncircuit.add_node(0, label=\"∧\", layer=0)\n# Layer 1\ncircuit.add_node(1, label=\"∨\", layer=1)\ncircuit.add_node(2, label=\"∨\", layer=1)\ncircuit.add_edge(0, 1)\ncircuit.add_edge(0, 2)\n# Layer 2\ncircuit.add_node(3, label=\"x\", layer=2)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "formula",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "formula = circuit_to_formula(circuit)\nprint(formula_to_string(formula))\nlabels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "labels = nx.get_node_attributes(circuit, \"label\")\noptions = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "options = {\n    \"node_size\": 600,\n    \"alpha\": 0.5,\n    \"node_color\": \"blue\",\n    \"labels\": labels,\n    \"font_size\": 22,\n}\nplt.figure(figsize=(8, 8))\npos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "peekOfCode": "pos = nx.multipartite_layout(circuit, subset_key=\"layer\")\nnx.draw_networkx(circuit, pos, **options)\nplt.title(formula_to_string(formula))\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_circuits",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "G = nx.davis_southern_women_graph()\nwomen = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "women",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "women = G.graph[\"top\"]\nclubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "clubs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "clubs = G.graph[\"bottom\"]\nprint(\"Biadjacency matrix\")\nprint(bipartite.biadjacency_matrix(G, women, clubs))\n# project bipartite graph onto women nodes\nW = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.projected_graph(G, women)\nprint()\nprint(\"#Friends, Member\")\nfor w in women:\n    print(f\"{W.degree(w)} {w}\")\n# project bipartite graph onto women nodes keeping number of co-occurrence\n# the degree computed is weighted and counts the total number of shared contacts\nW = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "W",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "W = bipartite.weighted_projected_graph(G, women)\nprint()\nprint(\"#Friend meetings, Member\")\nfor w in women:\n    print(f\"{W.degree(w, weight='weight')} {w}\")\npos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "peekOfCode": "pos = nx.spring_layout(G, seed=648)  # Seed layout for reproducible node positions\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_davis_club",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "original_graph = nx.DiGraph()\nwhite_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "white_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "white_nodes = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\"]\nred_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "red_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "red_nodes = [\"A\", \"B\", \"C\"]\nnode_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_sizes = [250 for node in white_nodes + red_nodes]\nnode_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "node_colors = [\"white\" for n in white_nodes] + [\"red\" for n in red_nodes]\noriginal_graph.add_nodes_from(white_nodes + red_nodes)\noriginal_graph.add_edges_from(\n    [\n        (\"1\", \"C\"),\n        (\"1\", \"B\"),\n        (\"2\", \"C\"),\n        (\"2\", \"B\"),\n        (\"2\", \"A\"),\n        (\"3\", \"B\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\"}\npos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "pos = {\n    \"3\": (0, 1),\n    \"2\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0),\n    \"A\": (1, 1),\n    \"B\": (1, 2),\n    \"C\": (1, 3),\n    \"4\": (2, 3),\n    \"5\": (2, 1),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\"Original (%s edges)\" % original_graph.number_of_edges())\nnx.draw_networkx(original_graph, pos=pos, node_color=node_colors, **base_options)\nnonexp_graph, compression_nodes = nx.summarization.dedensify(\n    original_graph, threshold=2, copy=False\n)\nnonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_colors = list(node_colors)\nnonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_node_sizes = list(node_sizes)\nfor node in compression_nodes:\n    nonexp_node_colors.append(\"yellow\")\n    nonexp_node_sizes.append(600)\nplt.subplot(1, 2, 2)\nplt.title(\"Dedensified (%s edges)\" % nonexp_graph.number_of_edges())\nnonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "nonexp_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "nonexp_pos = {\n    \"5\": (0, 0),\n    \"B\": (0, 2),\n    \"1\": (0, 3),\n    \"6\": (1, 0.75),\n    \"3\": (1.5, 1.5),\n    \"A\": (2, 0),\n    \"C\": (2, 3),\n    \"4\": (3, 1.5),\n    \"2\": (3, 2.5),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "c_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "peekOfCode": "c_nodes = list(compression_nodes)\nc_nodes.sort()\nfor spot, node in enumerate(c_nodes):\n    nonexp_pos[node] = (2, spot + 2)\nnx.draw_networkx(\n    nonexp_graph,\n    pos=nonexp_pos,\n    node_color=nonexp_node_colors,\n    node_size=nonexp_node_sizes,\n    **base_options,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_dedensification",
        "documentation": {}
    },
    {
        "label": "create_community_node_colors",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])\n    colors = [\"#D4FCB1\", \"#CDC5FC\", \"#FFC2C4\", \"#F2D140\", \"#BCC6C8\"][:number_of_colors]\n    node_colors = []\n    for node in graph:\n        current_community_index = 0\n        for community in communities:\n            if node in community:\n                node_colors.append(colors[current_community_index])\n                break",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "visualize_communities",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "def visualize_communities(graph, communities, i):\n    node_colors = create_community_node_colors(graph, communities)\n    modularity = round(nx.community.modularity(graph, communities), 6)\n    title = f\"Community Visualization of {len(communities)} communities with modularity of {modularity}\"\n    pos = nx.spring_layout(graph, k=0.3, iterations=50, seed=2)\n    plt.subplot(3, 1, i)\n    plt.title(title)\n    nx.draw(\n        graph,\n        pos=pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "G = nx.karate_club_graph()\ncommunities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "communities",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "communities = list(nx.community.girvan_newman(G))\n# Modularity -> measures the strength of division of a network into modules\nmodularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "modularity_df",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "peekOfCode": "modularity_df = pd.DataFrame(\n    [\n        [k + 1, nx.community.modularity(G, communities[k])]\n        for k in range(len(communities))\n    ],\n    columns=[\"k\", \"modularity\"],\n)\n# function to create node colour list\ndef create_community_node_colors(graph, communities):\n    number_of_colors = len(communities[0])",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_girvan_newman",
        "documentation": {}
    },
    {
        "label": "digitsrep",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist\n        # Floor-division",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "powersum",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def powersum(n, p, b=10):\n    \"\"\"Return sum of digits of n (in base b) raised to the power p.\"\"\"\n    dlist = digitsrep(n, b)\n    sum = 0\n    for k in dlist:\n        sum += k**p\n    return sum\ndef attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "attractor153_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def attractor153_graph(n, p, multiple=3, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,3,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        if k % multiple == 0 and k not in G:\n            k1 = k\n            knext = powersum(k1, p, b)\n            while k1 != knext:\n                G.add_edge(k1, knext)\n                k1 = knext",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_graph_old",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_graph_old(n, b=10):\n    \"\"\"Return digraph of iterations of powersum(n,2,10).\"\"\"\n    G = nx.DiGraph()\n    for k in range(1, n + 1):\n        k1 = k\n        G.add_node(k1)  # case k1==knext, at least add node\n        knext = powersum(k1, 2, b)\n        G.add_edge(k1, knext)\n        while k1 != knext:  # stop if fixed point\n            k1 = knext",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "sum_of_digits_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def sum_of_digits_graph(nmax, b=10):\n    def f(n):\n        return powersum(n, 1, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "squaring_cycle_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def squaring_cycle_digraph(nmax, b=10):\n    def f(n):\n        return powersum(n, 2, b)\n    return discrete_dynamics_digraph(nmax, f)\ndef cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "cubing_153_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def cubing_153_digraph(nmax):\n    def f(n):\n        return powersum(n, 3, 10)\n    return discrete_dynamics_digraph(nmax, f)\ndef discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "discrete_dynamics_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def discrete_dynamics_digraph(nmax, f, itermax=50000):\n    G = nx.DiGraph()\n    for k in range(1, nmax + 1):\n        kold = k\n        G.add_node(kold)\n        knew = f(kold)\n        G.add_edge(kold, knew)\n        while kold != knew and kold << itermax:\n            # iterate until fixed point reached or itermax is exceeded\n            kold = knew",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "collatz_problem_digraph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def collatz_problem_digraph(nmax):\n    def f(n):\n        if n % 2 == 0:\n            return n // 2\n        else:\n            return 3 * n + 1\n    return discrete_dynamics_digraph(nmax, f)\ndef fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "fixed_points",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "def fixed_points(G):\n    \"\"\"Return a list of fixed points for the discrete dynamical\n    system represented by the digraph G.\n    \"\"\"\n    return [n for n in G if G.out_degree(n) == 0]\nnmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(108)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(108) = 1**3 + 0**3 + 8**3 = 513\nand\nf(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "f(513)",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "f(513) = 5**3 + 1**3 + 3**3 = 153\nSo, starting at 108 we reach 153 in two iterations,\nrepresented as:\n108->513->153\nComputing all orbits of 3N up to 10**5 reveals that the attractor\n153 is reached in a maximum of 14 iterations. In this code we\nshow that 13 cycles is the maximum required for all integers (in 3N)\nless than 10,000.\nThe smallest number that requires 13 iterations to reach 153, is 177, i.e.,\n177->687->1071->345->216->225->141->66->432->99->1458->702->351->153",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\np = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "p = 3\ndef digitsrep(n, b=10):\n    \"\"\"Return list of digits comprising n represented in base b.\n    n must be a nonnegative integer\"\"\"\n    if n <= 0:\n        return [0]\n    dlist = []\n    while n > 0:\n        # Prepend next least-significant digit\n        dlist = [n % b] + dlist",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "nmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "nmax = 10000\nprint(f\"Building cubing_153_digraph({nmax})\")\nG = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "peekOfCode": "G = cubing_153_digraph(nmax)\nprint(\"Resulting digraph has\", len(G), \"nodes and\", G.size(), \" edges\")\nprint(\"Shortest path from 177 to 153 is:\")\nprint(nx.shortest_path(G, 177, 153))\nprint(f\"fixed points are {fixed_points(G)}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_iterated_dynamical_systems",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "G = nx.krackhardt_kite_graph()\nprint(\"Betweenness\")\nb = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "b",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "b = nx.betweenness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {b[v]:.3f}\")\nprint(\"Degree centrality\")\nd = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "d",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "d = nx.degree_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {d[v]:.3f}\")\nprint(\"Closeness centrality\")\nc = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "c = nx.closeness_centrality(G)\nfor v in G.nodes():\n    print(f\"{v:2} {c[v]:.3f}\")\npos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "peekOfCode": "pos = nx.spring_layout(G, seed=367)  # Seed layout for reproducibility\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_krackhardt_centrality",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "G = nx.Graph(\n    [\n        (1, 2),\n        (7, 2),\n        (3, 9),\n        (3, 2),\n        (7, 6),\n        (5, 2),\n        (1, 5),\n        (2, 8),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "I",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "I = approx.maximum_independent_set(G)\nprint(f\"Maximum independent set of G: {I}\")\npos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "peekOfCode": "pos = nx.spring_layout(G, seed=39299899)\nnx.draw(\n    G,\n    pos=pos,\n    with_labels=True,\n    node_color=[\"tab:red\" if n in I else \"tab:blue\" for n in G],\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_maximum_independent_set",
        "documentation": {}
    },
    {
        "label": "chunks",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def chunks(l, n):\n    \"\"\"Divide a list of nodes `l` in `n` chunks\"\"\"\n    l_c = iter(l)\n    while 1:\n        x = tuple(itertools.islice(l_c, n))\n        if not x:\n            return\n        yield x\ndef betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "betweenness_centrality_parallel",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "def betweenness_centrality_parallel(G, processes=None):\n    \"\"\"Parallel betweenness centrality  function\"\"\"\n    p = Pool(processes=processes)\n    node_divisor = len(p._pool) * 4\n    node_chunks = list(chunks(G.nodes(), G.order() // node_divisor))\n    num_chunks = len(node_chunks)\n    bt_sc = p.starmap(\n        nx.betweenness_centrality_subset,\n        zip(\n            [G] * num_chunks,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ba",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ba = nx.barabasi_albert_graph(1000, 3)\nG_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_er",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_er = nx.gnp_random_graph(1000, 0.01)\nG_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G_ws",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "peekOfCode": "G_ws = nx.connected_watts_strogatz_graph(1000, 4, 0.1)\nfor G in [G_ba, G_er, G_ws]:\n    print(\"\")\n    print(\"Computing betweenness centrality for:\")\n    print(G)\n    print(\"\\tParallel version\")\n    start = time.time()\n    bt = betweenness_centrality_parallel(G)\n    print(f\"\\t\\tTime: {(time.time() - start):.4F} seconds\")\n    print(f\"\\t\\tBetweenness centrality for node 0: {bt[0]:.5f}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_parallel_betweenness",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "G = nx.grid_2d_graph(3, 3)\nrcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "rcm",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "rcm = list(nx.utils.reverse_cuthill_mckee_ordering(G))\nprint(\"ordering\", rcm)\nprint(\"unordered Laplacian matrix\")\nA = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "A",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "A = nx.laplacian_matrix(G)\nx, y = np.nonzero(A)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(A)\nB = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "B",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "peekOfCode": "B = nx.laplacian_matrix(G, nodelist=rcm)\nprint(\"low-bandwidth Laplacian matrix\")\nx, y = np.nonzero(B)\n# print(f\"lower bandwidth: {(y - x).max()}\")\n# print(f\"upper bandwidth: {(x - y).max()}\")\nprint(f\"bandwidth: {(y - x).max() + (x - y).max() + 1}\")\nprint(B)\nsns.heatmap(B.todense(), cbar=False, square=True, linewidths=0.5, annot=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_rcm",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "nodes = {\n    \"A\": {\"color\": \"Red\"},\n    \"B\": {\"color\": \"Red\"},\n    \"C\": {\"color\": \"Red\"},\n    \"D\": {\"color\": \"Red\"},\n    \"E\": {\"color\": \"Blue\"},\n    \"F\": {\"color\": \"Blue\"},\n    \"G\": {\"color\": \"Blue\"},\n    \"H\": {\"color\": \"Blue\"},\n    \"I\": {\"color\": \"Yellow\"},",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edges = [\n    (\"A\", \"B\", \"Strong\"),\n    (\"A\", \"C\", \"Weak\"),\n    (\"A\", \"E\", \"Strong\"),\n    (\"A\", \"I\", \"Weak\"),\n    (\"B\", \"D\", \"Weak\"),\n    (\"B\", \"J\", \"Weak\"),\n    (\"B\", \"F\", \"Strong\"),\n    (\"C\", \"G\", \"Weak\"),\n    (\"D\", \"H\", \"Weak\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "original_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "original_graph = nx.Graph()\noriginal_graph.add_nodes_from(n for n in nodes.items())\noriginal_graph.add_edges_from((u, v, {\"type\": label}) for u, v, label in edges)\nplt.suptitle(\"SNAP Summarization\")\nbase_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "base_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "base_options = {\"with_labels\": True, \"edgecolors\": \"black\", \"node_size\": 500}\nax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "ax1 = plt.subplot(1, 2, 1)\nplt.title(\n    \"Original (%s nodes, %s edges)\"\n    % (original_graph.number_of_nodes(), original_graph.number_of_edges())\n)\npos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "pos = nx.spring_layout(original_graph, seed=7482934)\nnode_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = [d[\"color\"] for _, d in original_graph.nodes(data=True)]\nedge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_type_visual_weight_lookup",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_type_visual_weight_lookup = {\"Weak\": 1.0, \"Strong\": 3.0}\nedge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = [\n    edge_type_visual_weight_lookup[d[\"type\"]]\n    for _, _, d in original_graph.edges(data=True)\n]\nnx.draw_networkx(\n    original_graph, pos=pos, node_color=node_colors, width=edge_weights, **base_options\n)\nnode_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_attributes = (\"color\",)\nedge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_attributes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_attributes = (\"type\",)\nsummary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_graph",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_graph = nx.snap_aggregation(\n    original_graph, node_attributes, edge_attributes, prefix=\"S-\"\n)\nplt.subplot(1, 2, 2)\nplt.title(\n    \"SNAP Aggregation (%s nodes, %s edges)\"\n    % (summary_graph.number_of_nodes(), summary_graph.number_of_edges())\n)\nsummary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "summary_pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "summary_pos = nx.spring_layout(summary_graph, seed=8375428)\nnode_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "node_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "node_colors = []\nfor node in summary_graph:\n    color = summary_graph.nodes[node][\"color\"]\n    node_colors.append(color)\nedge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "edge_weights",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "peekOfCode": "edge_weights = []\nfor edge in summary_graph.edges():\n    edge_types = summary_graph.get_edge_data(*edge)[\"types\"]\n    edge_weight = 0.0\n    for edge_type in edge_types:\n        edge_weight += edge_type_visual_weight_lookup[edge_type[\"type\"]]\n    edge_weights.append(edge_weight)\nnx.draw_networkx(\n    summary_graph,\n    pos=summary_pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_snap",
        "documentation": {}
    },
    {
        "label": "graph_partitioning",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "def graph_partitioning(G, plotting=True):\n    \"\"\"Partition a directed graph into a list of subgraphs that contain\n    only entirely supported or entirely unsupported nodes.\n    \"\"\"\n    # Categorize nodes by their node_type attribute\n    supported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"supported\"}\n    unsupported_nodes = {n for n, d in G.nodes(data=\"node_type\") if d == \"unsupported\"}\n    # Make a copy of the graph.\n    H = G.copy()\n    # Remove all edges connecting supported and unsupported nodes.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex = nx.DiGraph()\nG_ex.add_nodes_from([\"In\"], node_type=\"input\", node_color=\"b\")\nG_ex.add_nodes_from([\"A\", \"C\", \"E\", \"F\"], node_type=\"supported\", node_color=\"g\")\nG_ex.add_nodes_from([\"B\", \"D\"], node_type=\"unsupported\", node_color=\"r\")\nG_ex.add_nodes_from([\"Out\"], node_type=\"output\", node_color=\"m\")\nG_ex.add_edges_from(\n    [\n        (\"In\", \"A\"),\n        (\"A\", \"B\"),\n        (\"B\", \"C\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The original graph.\")\nplt.show()\n###############################################################################\n# Calculate the subgraphs with plotting all results of intemediate steps.",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G_ex_r",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "G_ex_r = nx.DiGraph()\n# Composing all subgraphs.\nfor subgraph in subgraphs_of_G_ex:\n    G_ex_r = nx.compose(G_ex_r, subgraph)\n# Adding the previously stored edges.\nG_ex_r.add_edges_from(removed_edges.edges())\n###############################################################################\n# Check that the original graph and the reconstructed graphs are isomorphic.\n# --------------------------------------------------------------------------\n#",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "node_color_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "node_color_list = [nc for _, nc in G_ex_r.nodes(data=\"node_color\")]\npos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "description": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "peekOfCode": "pos = nx.spectral_layout(G_ex_r)\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G_ex_r, pos, alpha=0.3, edge_color=\"k\")\nnx.draw_networkx_nodes(G_ex_r, pos, alpha=0.8, node_color=node_color_list)\nnx.draw_networkx_labels(G_ex_r, pos, font_size=14)\nplt.axis(\"off\")\nplt.title(\"The reconstructed graph.\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.algorithms.plot_subgraphs",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "G = nx.lollipop_graph(4, 6)\npathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pathlengths",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pathlengths = []\nprint(\"source vertex {target:length, }\")\nfor v in G.nodes():\n    spl = dict(nx.single_source_shortest_path_length(G, v))\n    print(f\"{v} {spl} \")\n    for p in spl:\n        pathlengths.append(spl[p])\nprint()\nprint(f\"average shortest path length {sum(pathlengths) / len(pathlengths)}\")\n# histogram of path lengths",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "dist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "dist = {}\nfor p in pathlengths:\n    if p in dist:\n        dist[p] += 1\n    else:\n        dist[p] = 1\nprint()\nprint(\"length #paths\")\nverts = dist.keys()\nfor d in sorted(verts):",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "verts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "verts = dist.keys()\nfor d in sorted(verts):\n    print(f\"{d} {dist[d]}\")\nprint(f\"radius: {nx.radius(G)}\")\nprint(f\"diameter: {nx.diameter(G)}\")\nprint(f\"eccentricity: {nx.eccentricity(G)}\")\nprint(f\"center: {nx.center(G)}\")\nprint(f\"periphery: {nx.periphery(G)}\")\nprint(f\"density: {nx.density(G)}\")\npos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3068)  # Seed layout for reproducibility\nnx.draw(G, pos=pos, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_properties",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "G = nx.grid_2d_graph(5, 5)  # 5x5 grid\n# print the adjacency list\nfor line in nx.generate_adjlist(G):\n    print(line)\n# write edgelist to grid.edgelist\nnx.write_edgelist(G, path=\"grid.edgelist\", delimiter=\":\")\n# read edgelist from grid.edgelist\nH = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "H = nx.read_edgelist(path=\"grid.edgelist\", delimiter=\":\")\npos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "peekOfCode": "pos = nx.spring_layout(H, seed=200)\nnx.draw(H, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_read_write",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(1, 2)\nG.add_edge(1, 3)\nG.add_edge(1, 5)\nG.add_edge(2, 3)\nG.add_edge(3, 4)\nG.add_edge(4, 5)\n# explicitly set positions\npos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {1: (0, 0), 2: (-1, 0.3), 3: (2, 0.17), 4: (4, 0.255), 5: (5, 0.03)}\noptions = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "options = {\n    \"font_size\": 36,\n    \"node_size\": 3000,\n    \"node_color\": \"white\",\n    \"edgecolors\": \"black\",\n    \"linewidths\": 5,\n    \"width\": 5,\n}\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()\n# %%\n# A directed graph\nG = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "G = nx.DiGraph([(0, 3), (1, 3), (2, 4), (3, 5), (3, 6), (4, 6), (5, 6)])\n# group nodes by column\nleft_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "left_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "left_nodes = [0, 1, 2]\nmiddle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "middle_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "middle_nodes = [3, 4]\nright_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "right_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "right_nodes = [5, 6]\n# set the position according to column (x-coord)\npos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "pos = {n: (0, i) for i, n in enumerate(left_nodes)}\npos.update({n: (1, i + 0.5) for i, n in enumerate(middle_nodes)})\npos.update({n: (2, i + 0.5) for i, n in enumerate(right_nodes)})\nnx.draw_networkx(G, pos, **options)\n# Set margins for the axes so that nodes aren't clipped\nax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.20)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.basic.plot_simple_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "G = nx.path_graph(20)  # An example graph\ncenter_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "center_node",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "center_node = 5  # Or any other node to be in the center\nedge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "edge_nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "edge_nodes = set(G) - {center_node}\n# Ensures the nodes around the circle are evenly distributed\npos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos = nx.circular_layout(G.subgraph(edge_nodes))\npos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "pos[center_node]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "peekOfCode": "pos[center_node] = np.array([0, 0])  # manually specify node position\nnx.draw(G, pos, with_labels=True)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_center_node",
        "documentation": {}
    },
    {
        "label": "chess_pgn_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "def chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}\n    with bz2.BZ2File(pgn_file) as datafile:",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "game_details",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "game_details = [\"Event\", \"Date\", \"Result\", \"ECO\", \"Site\"]\ndef chess_pgn_graph(pgn_file=\"chess_masters_WCC.pgn.bz2\"):\n    \"\"\"Read chess games in pgn format in pgn_file.\n    Filenames ending in .bz2 will be uncompressed.\n    Return the MultiDiGraph of players connected by a chess game.\n    Edges contain game data in a dict.\n    \"\"\"\n    import bz2\n    G = nx.MultiDiGraph()\n    game = {}",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "G = chess_pgn_graph()\nprint(\n    f\"Loaded {G.number_of_edges()} chess games between {G.number_of_nodes()} players\\n\"\n)\n# identify connected components of the undirected version\nH = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = G.to_undirected()\nGcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "Gcc = [H.subgraph(c) for c in nx.connected_components(H)]\nif len(Gcc) > 1:\n    print(f\"Note the disconnected component consisting of:\\n{Gcc[1].nodes()}\")\n# find all games with B97 opening (as described in ECO)\nopenings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "openings",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "openings = {game_info[\"ECO\"] for (white, black, game_info) in G.edges(data=True)}\nprint(f\"\\nFrom a total of {len(openings)} different openings,\")\nprint(\"the following games used the Sicilian opening\")\nprint('with the Najdorff 7...Qb6 \"Poisoned Pawn\" variation.\\n')\nfor white, black, game_info in G.edges(data=True):\n    if game_info[\"ECO\"] == \"B97\":\n        summary = f\"{white} vs {black}\\n\"\n        for k, v in game_info.items():\n            summary += f\"   {k}: {v}\\n\"\n        summary += \"\\n\"",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "H = nx.Graph(G)\n# edge width is proportional number of games played\nedgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "edgewidth",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "edgewidth = [len(G.get_edge_data(u, v)) for u, v in H.edges()]\n# node size is proportional to number of games won\nwins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "wins",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "wins = dict.fromkeys(G.nodes(), 0.0)\nfor u, v, d in G.edges(data=True):\n    r = d[\"Result\"].split(\"-\")\n    if r[0] == \"1\":\n        wins[u] += 1.0\n    elif r[0] == \"1/2\":\n        wins[u] += 0.5\n        wins[v] += 0.5\n    else:\n        wins[v] += 1.0",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "nodesize",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "nodesize = [wins[v] * 50 for v in H]\n# Generate layout for visualization\npos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\n# Manual tweaking to limit node label overlap in the visualization\npos[\"Reshevsky, Samuel H\"] += (0.05, -0.10)\npos[\"Botvinnik, Mikhail M\"] += (0.03, -0.06)\npos[\"Smyslov, Vassily V\"] += (0.05, -0.03)\nfig, ax = plt.subplots(figsize=(12, 12))\n# Visualize graph components\nnx.draw_networkx_edges(H, pos, alpha=0.3, width=edgewidth, edge_color=\"m\")\nnx.draw_networkx_nodes(H, pos, node_size=nodesize, node_color=\"#210070\", alpha=0.9)\nlabel_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "label_options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "label_options = {\"ec\": \"k\", \"fc\": \"white\", \"alpha\": 0.7}\nnx.draw_networkx_labels(H, pos, font_size=14, bbox=label_options)\n# Title/legend\nfont = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font = {\"fontname\": \"Helvetica\", \"color\": \"k\", \"fontweight\": \"bold\", \"fontsize\": 14}\nax.set_title(\"World Chess Championship Games: 1886 - 1985\", font)\n# Change font color for legend\nfont[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "font[\"color\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "peekOfCode": "font[\"color\"] = \"r\"\nax.text(\n    0.80,\n    0.10,\n    \"edge width = # games played\",\n    horizontalalignment=\"center\",\n    transform=ax.transAxes,\n    fontdict=font,\n)\nax.text(",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_chess_masters",
        "documentation": {}
    },
    {
        "label": "icons",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icons = {\n    \"router\": \"icons/router_black_144x144.png\",\n    \"switch\": \"icons/switch_black_144x144.png\",\n    \"PC\": \"icons/computer_black_144x144.png\",\n}\n# Load images\nimages = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "images",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "images = {k: PIL.Image.open(fname) for k, fname in icons.items()}\n# Generate the computer network graph\nG = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "G = nx.Graph()\nG.add_node(\"router\", image=images[\"router\"])\nfor i in range(1, 4):\n    G.add_node(f\"switch_{i}\", image=images[\"switch\"])\n    for j in range(1, 4):\n        G.add_node(\"PC_\" + str(i) + \"_\" + str(j), image=images[\"PC\"])\nG.add_edge(\"router\", \"switch_1\")\nG.add_edge(\"router\", \"switch_2\")\nG.add_edge(\"router\", \"switch_3\")\nfor u in range(1, 4):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1734289230)\nfig, ax = plt.subplots()\n# Note: the min_source/target_margin kwargs only work with FancyArrowPatch objects.\n# Force the use of FancyArrowPatch for edge drawing by setting `arrows=True`,\n# but suppress arrowheads with `arrowstyle=\"-\"`\nnx.draw_networkx_edges(\n    G,\n    pos=pos,\n    ax=ax,\n    arrows=True,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_figure",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_figure = ax.transData.transform\n# Transform from display to figure coordinates\ntr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "tr_axes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "tr_axes = fig.transFigure.inverted().transform\n# Select the size of the image (relative to the X axis)\nicon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_size",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_size = (ax.get_xlim()[1] - ax.get_xlim()[0]) * 0.025\nicon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "icon_center",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "peekOfCode": "icon_center = icon_size / 2.0\n# Add the respective image to each node\nfor n in G.nodes:\n    xf, yf = tr_figure(pos[n])\n    xa, ya = tr_axes((xf, yf))\n    # get overlapped axes and plot icon\n    a = plt.axes([xa - icon_center, ya - icon_center, icon_size, icon_size])\n    a.imshow(G.nodes[n][\"image\"])\n    a.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_custom_node_icons",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "G = nx.gnp_random_graph(100, 0.02, seed=10374196)\ndegree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "degree_sequence = sorted((d for n, d in G.degree()), reverse=True)\ndmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "dmax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "dmax = max(degree_sequence)\nfig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "fig = plt.figure(\"Degree of a random graph\", figsize=(8, 8))\n# Create a gridspec for adding subplots of different sizes\naxgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "axgrid",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "axgrid = fig.add_gridspec(5, 4)\nax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax0",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax0 = fig.add_subplot(axgrid[0:3, :])\nGcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "Gcc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "Gcc = G.subgraph(sorted(nx.connected_components(G), key=len, reverse=True)[0])\npos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "pos = nx.spring_layout(Gcc, seed=10396953)\nnx.draw_networkx_nodes(Gcc, pos, ax=ax0, node_size=20)\nnx.draw_networkx_edges(Gcc, pos, ax=ax0, alpha=0.4)\nax0.set_title(\"Connected components of G\")\nax0.set_axis_off()\nax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax1 = fig.add_subplot(axgrid[3:, :2])\nax1.plot(degree_sequence, \"b-\", marker=\"o\")\nax1.set_title(\"Degree Rank Plot\")\nax1.set_ylabel(\"Degree\")\nax1.set_xlabel(\"Rank\")\nax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "ax2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "peekOfCode": "ax2 = fig.add_subplot(axgrid[3:, 2:])\nax2.bar(*np.unique(degree_sequence, return_counts=True))\nax2.set_title(\"Degree histogram\")\nax2.set_xlabel(\"Degree\")\nax2.set_ylabel(\"# of Nodes\")\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_degree",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "seed = 13648  # Seed random number generators for reproducibility\nG = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "G = nx.random_k_out_graph(10, 3, 0.5, seed=seed)\npos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)\nnode_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "node_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "node_sizes = [3 + 10 * i for i in range(len(G))]\nM = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "M",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "M = G.number_of_edges()\nedge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_colors = range(2, M + 2)\nedge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edge_alphas",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edge_alphas = [(5 + i) / (M + 4) for i in range(M)]\ncmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "cmap",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "cmap = plt.cm.plasma\nnodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "nodes = nx.draw_networkx_nodes(G, pos, node_size=node_sizes, node_color=\"indigo\")\nedges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "edges",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "edges = nx.draw_networkx_edges(\n    G,\n    pos,\n    node_size=node_sizes,\n    arrowstyle=\"->\",\n    arrowsize=10,\n    edge_color=edge_colors,\n    edge_cmap=cmap,\n    width=2,\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "pc",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "pc = mpl.collections.PatchCollection(edges, cmap=cmap)\npc.set_array(edge_colors)\nax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "peekOfCode": "ax = plt.gca()\nax.set_axis_off()\nplt.colorbar(pc, ax=ax)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_directed",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "G = nx.star_graph(20)\npos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "pos = nx.spring_layout(G, seed=63)  # Seed layout for reproducibility\ncolors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "colors = range(20)\noptions = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "peekOfCode": "options = {\n    \"node_color\": \"#A0CBE2\",\n    \"edge_color\": colors,\n    \"width\": 4,\n    \"edge_cmap\": plt.cm.Blues,\n    \"with_labels\": False,\n}\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_edge_colormap",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "n = 1000\nm = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "m = 2\nseed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "seed = 20532\nG = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "G = nx.barabasi_albert_graph(n, m, seed=seed)\n# find node with largest degree\nnode_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "node_and_degree",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "node_and_degree = G.degree()\n(largest_hub, degree) = sorted(node_and_degree, key=itemgetter(1))[-1]\n# Create ego graph of main hub\nhub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "hub_ego",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "hub_ego = nx.ego_graph(G, largest_hub)\n# Draw graph\npos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "pos = nx.spring_layout(hub_ego, seed=seed)  # Seed layout for reproducibility\nnx.draw(hub_ego, pos, node_color=\"b\", node_size=50, with_labels=False)\n# Draw ego as large and red\noptions = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "peekOfCode": "options = {\"node_size\": 300, \"node_color\": \"r\"}\nnx.draw_networkx_nodes(hub_ego, pos, nodelist=[largest_hub], **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_ego_graph",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "n = 1000  # 1000 nodes\nm = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "m = 5000  # 5000 edges\nG = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=5040)  # Seed for reproducibility\nL = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "L",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "L = nx.normalized_laplacian_matrix(G)\ne = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "e",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "peekOfCode": "e = numpy.linalg.eigvals(L.toarray())\nprint(\"Largest eigenvalue:\", max(e))\nprint(\"Smallest eigenvalue:\", min(e))\nplt.hist(e, bins=100)  # histogram with 100 bins\nplt.xlim(0, 2)  # eigenvalues between 0 and 2\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_eigenvalues",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "G = nx.grid_2d_graph(4, 4)  # 4x4 grid\npos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=100, seed=39775)\n# Create a 2x2 subplot\nfig, all_axes = plt.subplots(2, 2)\nax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "ax = all_axes.flat\nnx.draw(G, pos, ax=ax[0], font_size=8)\nnx.draw(G, pos, ax=ax[1], node_size=0, with_labels=False)\nnx.draw(\n    G,\n    pos,\n    ax=ax[2],\n    node_color=\"tab:green\",\n    edgecolors=\"tab:gray\",  # Node surface color\n    edge_color=\"tab:gray\",  # Color of graph edges",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "peekOfCode": "H = G.to_directed()\nnx.draw(\n    H,\n    pos,\n    ax=ax[3],\n    node_color=\"tab:orange\",\n    node_size=20,\n    with_labels=False,\n    arrowsize=10,\n    width=2,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_four_grids",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "G = nx.house_graph()\n# explicitly set positions\npos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "pos = {0: (0, 0), 1: (1, 0), 2: (0, 1), 3: (1, 1), 4: (0.5, 2.0)}\n# Plot nodes with different properties for the \"wall\" and \"roof\" nodes\nnx.draw_networkx_nodes(\n    G, pos, node_size=3000, nodelist=[0, 1, 2, 3], node_color=\"tab:blue\"\n)\nnx.draw_networkx_nodes(G, pos, node_size=2000, nodelist=[4], node_color=\"tab:orange\")\nnx.draw_networkx_edges(G, pos, alpha=0.5, width=6)\n# Customize axes\nax = plt.gca()\nax.margins(0.11)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.11)\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_house_with_colors",
        "documentation": {}
    },
    {
        "label": "miles_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "def miles_graph():\n    \"\"\"Return the cites example graph in miles_dat.txt\n    from the Stanford GraphBase.\n    \"\"\"\n    # open file miles_dat.txt.gz (or miles_dat.txt)\n    fh = gzip.open(\"knuth_miles.txt.gz\", \"r\")\n    G = nx.Graph()\n    G.position = {}\n    G.population = {}\n    cities = []",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "G = miles_graph()\nprint(\"Loaded miles_dat.txt containing 128 cities.\")\nprint(G)\n# make new graph of cites, edge if less then 300 miles between them\nH = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "H = nx.Graph()\nfor v in G:\n    H.add_node(v)\nfor u, v, d in G.edges(data=True):\n    if d[\"weight\"] < 300:\n        H.add_edge(u, v)\n# draw with matplotlib/pylab\nfig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "fig = plt.figure(figsize=(8, 6))\n# nodes colored by degree sized by population\nnode_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "node_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "peekOfCode": "node_color = [float(H.degree(v)) for v in H]\n# Use cartopy to provide a backdrop for the visualization\ntry:\n    import cartopy.crs as ccrs\n    import cartopy.io.shapereader as shpreader\n    ax = fig.add_axes([0, 0, 1, 1], projection=ccrs.LambertConformal(), frameon=False)\n    ax.set_extent([-125, -66.5, 20, 50], ccrs.Geodetic())\n    # Add map of countries & US states as a backdrop\n    for shapename in (\"admin_1_states_provinces_lakes_shp\", \"admin_0_countries\"):\n        shp = shpreader.natural_earth(",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_knuth_miles",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "G = nx.cubical_graph()\npos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "pos = nx.spring_layout(G, seed=3113794652)  # positions for all nodes\n# nodes\noptions = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "options = {\"edgecolors\": \"tab:gray\", \"node_size\": 800, \"alpha\": 0.9}\nnx.draw_networkx_nodes(G, pos, nodelist=[0, 1, 2, 3], node_color=\"tab:red\", **options)\nnx.draw_networkx_nodes(G, pos, nodelist=[4, 5, 6, 7], node_color=\"tab:blue\", **options)\n# edges\nnx.draw_networkx_edges(G, pos, width=1.0, alpha=0.5)\nnx.draw_networkx_edges(\n    G,\n    pos,\n    edgelist=[(0, 1), (1, 2), (2, 3), (3, 0)],\n    width=8,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels = {}\nlabels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[0] = r\"$a$\"\nlabels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[1]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[1] = r\"$b$\"\nlabels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[2]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[2] = r\"$c$\"\nlabels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[3]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[3] = r\"$d$\"\nlabels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[4]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[4] = r\"$\\alpha$\"\nlabels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[5]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[5] = r\"$\\beta$\"\nlabels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[6]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[6] = r\"$\\gamma$\"\nlabels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "labels[7]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "peekOfCode": "labels[7] = r\"$\\delta$\"\nnx.draw_networkx_labels(G, pos, labels, font_size=22, font_color=\"whitesmoke\")\nplt.tight_layout()\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_labels_and_colors",
        "documentation": {}
    },
    {
        "label": "multilayered_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "def multilayered_graph(*subset_sizes):\n    extents = nx.utils.pairwise(itertools.accumulate((0,) + subset_sizes))\n    layers = [range(start, end) for start, end in extents]\n    G = nx.Graph()\n    for i, layer in enumerate(layers):\n        G.add_nodes_from(layer, layer=i)\n    for layer1, layer2 in nx.utils.pairwise(layers):\n        G.add_edges_from(itertools.product(layer1, layer2))\n    return G\nG = multilayered_graph(*subset_sizes)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_sizes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_sizes = [5, 5, 4, 3, 2, 4, 4, 3]\nsubset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "subset_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "subset_color = [\n    \"gold\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"violet\",\n    \"limegreen\",\n    \"limegreen\",\n    \"darkorange\",\n]",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "G = multilayered_graph(*subset_sizes)\ncolor = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "color = [subset_color[data[\"layer\"]] for v, data in G.nodes(data=True)]\npos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nplt.figure(figsize=(8, 8))\nnx.draw(G, pos, node_color=color, with_labels=False)\nplt.axis(\"equal\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_multipartite_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "G = nx.cycle_graph(24)\npos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "peekOfCode": "pos = nx.circular_layout(G)\nnx.draw(G, pos, node_color=range(24), node_size=800, cmap=plt.cm.Blues)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_node_colormap",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "def cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_dist_to_color",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_dist_to_color = {\n    1: \"tab:red\",\n    2: \"tab:orange\",\n    3: \"tab:olive\",\n    4: \"tab:green\",\n    5: \"tab:blue\",\n    6: \"tab:purple\",\n}\n# Create a complete graph with an odd number of nodes\nnnodes = 13",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nnodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nnodes = 13\nG = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "G = nx.complete_graph(nnodes)\n# A graph with (2n + 1) nodes requires n colors for the edges\nn = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "n = (nnodes - 1) // 2\nndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "ndist_iter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "ndist_iter = list(range(1, n + 1))\n# Take advantage of circular symmetry in determining node distances\nndist_iter += ndist_iter[::-1]\ndef cycle(nlist, n):\n    return nlist[-n:] + nlist[:-n]\n# Rotate nodes around the circle and assign colors for each edge based on\n# node distance\nnodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "nodes",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "nodes = list(G.nodes())\nfor i, nd in enumerate(ndist_iter):\n    for u, v in zip(nodes, cycle(nodes, i + 1)):\n        G[u][v][\"color\"] = node_dist_to_color[nd]\npos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "pos = nx.circular_layout(G)\n# Create a figure with 1:1 aspect ratio to preserve the circle.\nfig, ax = plt.subplots(figsize=(8, 8))\nnode_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "node_opts",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "node_opts = {\"node_size\": 500, \"node_color\": \"w\", \"edgecolors\": \"k\", \"linewidths\": 2.0}\nnx.draw_networkx_nodes(G, pos, **node_opts)\nnx.draw_networkx_labels(G, pos, font_size=14)\n# Extract color from edge data\nedge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "edge_colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "peekOfCode": "edge_colors = [edgedata[\"color\"] for _, _, edgedata in G.edges(data=True)]\nnx.draw_networkx_edges(G, pos, width=2.0, edge_color=edge_colors)\nax.set_axis_off()\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_rainbow_coloring",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "G = nx.random_geometric_graph(200, 0.125, seed=896803)\n# position is stored as node attribute data for random_geometric_graph\npos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# find node near center (0.5,0.5)\ndmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "dmin",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "dmin = 1\nncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "ncenter",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "ncenter = 0\nfor n in pos:\n    x, y = pos[n]\n    d = (x - 0.5) ** 2 + (y - 0.5) ** 2\n    if d < dmin:\n        ncenter = n\n        dmin = d\n# color by path length from node near center\np = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "peekOfCode": "p = dict(nx.single_source_shortest_path_length(G, ncenter))\nplt.figure(figsize=(8, 8))\nnx.draw_networkx_edges(G, pos, alpha=0.4)\nnx.draw_networkx_nodes(\n    G,\n    pos,\n    nodelist=list(p.keys()),\n    node_size=80,\n    node_color=list(p.values()),\n    cmap=plt.cm.Reds_r,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_random_geometric_graph",
        "documentation": {}
    },
    {
        "label": "G1",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G1 = nx.read_edgelist(e1, delimiter=\"\\t\")\nG2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G2",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G2 = nx.read_edgelist(e2, delimiter=\"\\t\")\nG3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G3",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "G3 = nx.read_edgelist(e3, delimiter=\"\\t\")\npos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "peekOfCode": "pos = nx.spring_layout(G3, iterations=100, seed=173)\nplt.clf()\nplt.subplot(221)\nplt.title(\"samplike1\")\nnx.draw(G1, pos, node_size=50, with_labels=False)\nplt.subplot(222)\nplt.title(\"samplike2\")\nnx.draw(G2, pos, node_size=50, with_labels=False)\nplt.subplot(223)\nplt.title(\"samplike3\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_sampson",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "G = nx.complete_graph(3, create_using=nx.DiGraph)\nG.add_edge(0, 0)\npos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "pos = nx.circular_layout(G)\n# As of version 2.6, self-loops are drawn by default with the same styling as\n# other edges\nnx.draw(G, pos, with_labels=True)\n# Add self-loops to the remaining nodes\nedgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "edgelist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "peekOfCode": "edgelist = [(1, 1), (2, 2)]\nG.add_edges_from(edgelist)\n# Draw the newly added self-loops with different formatting\nnx.draw_networkx_edges(G, pos, edgelist=edgelist, arrowstyle=\"<|-\", style=\"dashed\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_selfloops",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "G = nx.path_graph(8)\npos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "peekOfCode": "pos = nx.spring_layout(G, seed=47)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_simple_path",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "options = {\"node_color\": \"C0\", \"node_size\": 100}\nG = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "peekOfCode": "G = nx.grid_2d_graph(6, 6)\nplt.subplot(332)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (2, 3))\nplt.subplot(334)\nnx.draw_spectral(G, **options)\nG.remove_edge((3, 2), (3, 3))\nplt.subplot(335)\nnx.draw_spectral(G, **options)\nG.remove_edge((2, 2), (3, 2))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_spectral_grid",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "G = nx.random_geometric_graph(20, radius=0.4, seed=3)\npos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos = nx.get_node_attributes(G, \"pos\")\n# Depot should be at (0,0)\npos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "pos[0]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "pos[0] = (0.5, 0.5)\nH = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "H = G.copy()\n# Calculating the distances between the nodes as edge's weight.\nfor i in range(len(pos)):\n    for j in range(i + 1, len(pos)):\n        dist = math.hypot(pos[i][0] - pos[j][0], pos[i][1] - pos[j][1])\n        dist = dist\n        G.add_edge(i, j, weight=dist)\ncycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "cycle",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "cycle = nx_app.christofides(G, weight=\"weight\")\nedge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "edge_list",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "peekOfCode": "edge_list = list(nx.utils.pairwise(cycle))\n# Draw closest edges on each node only\nnx.draw_networkx_edges(H, pos, edge_color=\"blue\", width=0.5)\n# Draw the route\nnx.draw_networkx(\n    G,\n    pos,\n    with_labels=True,\n    edgelist=edge_list,\n    edge_color=\"red\",",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_tsp",
        "documentation": {}
    },
    {
        "label": "mbox_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "def mbox_graph():\n    mbox = mailbox.mbox(\"unix_email.mbox\")  # parse unix mailbox\n    G = nx.MultiDiGraph()  # create empty graph\n    # parse each messages and build graph\n    for msg in mbox:  # msg is python email.Message.Message object\n        (source_name, source_addr) = parseaddr(msg[\"From\"])  # sender\n        # get all recipients\n        # see https://docs.python.org/3/library/email.html\n        tos = msg.get_all(\"to\", [])\n        ccs = msg.get_all(\"cc\", [])",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "G = mbox_graph()\n# print edges with message subject\nfor u, v, d in G.edges(data=True):\n    print(f\"From: {u} To: {v} Subject: {d['message']['Subject']}\")\npos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "pos = nx.spring_layout(G, iterations=10, seed=227)\nnx.draw(G, pos, node_size=0, alpha=0.4, edge_color=\"r\", font_size=16, with_labels=True)\nax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_unix_email",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "G = nx.Graph()\nG.add_edge(\"a\", \"b\", weight=0.6)\nG.add_edge(\"a\", \"c\", weight=0.2)\nG.add_edge(\"c\", \"d\", weight=0.1)\nG.add_edge(\"c\", \"e\", weight=0.7)\nG.add_edge(\"c\", \"f\", weight=0.9)\nG.add_edge(\"a\", \"d\", weight=0.3)\nelarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "elarge",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "elarge = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] > 0.5]\nesmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "esmall",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "esmall = [(u, v) for (u, v, d) in G.edges(data=True) if d[\"weight\"] <= 0.5]\npos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=7)  # positions for all nodes - seed for reproducibility\n# nodes\nnx.draw_networkx_nodes(G, pos, node_size=700)\n# edges\nnx.draw_networkx_edges(G, pos, edgelist=elarge, width=6)\nnx.draw_networkx_edges(\n    G, pos, edgelist=esmall, width=6, alpha=0.5, edge_color=\"b\", style=\"dashed\"\n)\n# node labels\nnx.draw_networkx_labels(G, pos, font_size=20, font_family=\"sans-serif\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "edge_labels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "edge_labels = nx.get_edge_attributes(G, \"weight\")\nnx.draw_networkx_edge_labels(G, pos, edge_labels)\nax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "ax",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "description": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "peekOfCode": "ax = plt.gca()\nax.margins(0.08)\nplt.axis(\"off\")\nplt.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.drawing.plot_weighted_graph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "G = nx.DiGraph(\n    [\n        (\"f\", \"a\"),\n        (\"a\", \"b\"),\n        (\"a\", \"e\"),\n        (\"b\", \"c\"),\n        (\"b\", \"d\"),\n        (\"d\", \"e\"),\n        (\"f\", \"c\"),\n        (\"f\", \"g\"),",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\")\nfig, ax = plt.subplots()\nnx.draw_networkx(G, pos=pos, ax=ax)\nax.set_title(\"DAG layout in topological order\")\nfig.tight_layout()\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_dag_layout",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "seed = 668273\nz = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "z",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "z = [5, 3, 3, 3, 3, 2, 2, 2, 1, 1, 1]\nprint(nx.is_graphical(z))\nprint(\"Configuration model\")\nG = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "G = nx.configuration_model(\n    z, seed=seed\n)  # configuration model, seed for reproducibility\ndegree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "degree_sequence",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "degree_sequence = [d for n, d in G.degree()]  # degree sequence\nprint(f\"Degree sequence {degree_sequence}\")\nprint(\"Degree histogram\")\nhist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "hist",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "hist = {}\nfor d in degree_sequence:\n    if d in hist:\n        hist[d] += 1\n    else:\n        hist[d] = 1\nprint(\"degree #nodes\")\nfor d in hist:\n    print(f\"{d:4} {hist[d]:6}\")\npos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed layout for reproducibility\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_degree_sequence",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "n = 10  # 10 nodes\nm = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "m",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "m = 20  # 20 edges\nseed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "seed",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "seed = 20160  # seed random number generators for reproducibility\n# Use seed for reproducibility\nG = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "G = nx.gnm_random_graph(n, m, seed=seed)\n# some properties\nprint(\"node degree clustering\")\nfor v in nx.nodes(G):\n    print(f\"{v} {nx.degree(G, v)} {nx.clustering(G, v)}\")\nprint()\nprint(\"the adjacency list\")\nfor line in nx.generate_adjlist(G):\n    print(line)\npos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "peekOfCode": "pos = nx.spring_layout(G, seed=seed)  # Seed for reproducible layout\nnx.draw(G, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_erdos_renyi",
        "documentation": {}
    },
    {
        "label": "n",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "n = 500  # n nodes\np = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "p",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "p = 0.1\nw = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "w",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "w = [p * n for i in range(n)]  # w = p*n for all nodes\nG = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "G = nx.expected_degree_graph(w)  # configuration model\nprint(\"Degree histogram\")\nprint(\"degree (#nodes) ****\")\ndh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "dh",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "peekOfCode": "dh = nx.degree_histogram(G)\nfor i, d in enumerate(dh):\n    print(f\"{i:2} ({d:2}) {'*'*d}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_expected_degree_sequence",
        "documentation": {}
    },
    {
        "label": "url",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "url = \"http://www-personal.umich.edu/~mejn/netdata/football.zip\"\nsock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "sock",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "sock = urllib.request.urlopen(url)  # open URL\ns = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "s",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "s = io.BytesIO(sock.read())  # read into BytesIO \"file\"\nsock.close()\nzf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "zf",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "zf = zipfile.ZipFile(s)  # zipfile object\ntxt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "txt",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "txt = zf.read(\"football.txt\").decode()  # read info file\ngml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = zf.read(\"football.gml\").decode()  # read gml data\n# throw away bogus first line with # from mejn files\ngml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "gml",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "gml = gml.split(\"\\n\")[1:]\nG = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "G = nx.parse_gml(gml)  # parse gml data\nprint(txt)\n# print degree for each team - number of games\nfor n, d in G.degree():\n    print(f\"{n:20} {d:2}\")\noptions = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "options = {\"node_color\": \"black\", \"node_size\": 50, \"linewidths\": 0, \"width\": 0.1}\npos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "peekOfCode": "pos = nx.spring_layout(G, seed=1969)  # Seed for reproducible layout\nnx.draw(G, pos, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_football",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "peekOfCode": "G = nx.karate_club_graph()\nprint(\"Node Degree\")\nfor v in G:\n    print(f\"{v:4} {G.degree(v):6}\")\nnx.draw_circular(G, with_labels=True)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_karate_club",
        "documentation": {}
    },
    {
        "label": "morse_encode",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "def morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol\n# Verify that the trie encoding is correct\nimport string\nfor letter in string.ascii_lowercase:\n    assert morse_encode(letter) == morse_direct_mapping[letter]",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dot",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dot = \"•\"\ndash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "dash",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "dash = \"—\"\n# Start with the direct mapping of letter -> code\nmorse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_direct_mapping",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_direct_mapping = {\n    \"a\": dot + dash,\n    \"b\": dash + dot * 3,\n    \"c\": dash + dot + dash + dot,\n    \"d\": dash + dot * 2,\n    \"e\": dot,\n    \"f\": dot * 2 + dash + dot,\n    \"g\": dash * 2 + dot,\n    \"h\": dot * 4,\n    \"i\": dot * 2,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "morse_mapping_sorted",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "morse_mapping_sorted = dict(\n    sorted(morse_direct_mapping.items(), key=lambda item: (len(item[1]), item[1]))\n)\n# More preprocessing: create the reverse mapping to simplify lookup\nreverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping = {v: k for k, v in morse_direct_mapping.items()}\nreverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "reverse_mapping[\"\"]",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "reverse_mapping[\"\"] = \"\"  # Represent the \"root\" node with an empty string\n# Construct the prefix tree from the sorted mapping\nG = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "G = nx.DiGraph()\nfor node, char in morse_mapping_sorted.items():\n    pred = char[:-1]\n    # Store the dot/dash relating the two letters as an edge attribute \"char\"\n    G.add_edge(reverse_mapping[pred], node, char=char[-1])\n# For visualization purposes, layout the nodes in topological order\nfor i, layer in enumerate(nx.topological_generations(G)):\n    for n in layer:\n        G.nodes[n][\"layer\"] = i\npos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "pos = nx.multipartite_layout(G, subset_key=\"layer\", align=\"horizontal\")\n# Flip the layout so the root node is on top\nfor k in pos:\n    pos[k][-1] *= -1\n# Visualize the trie\nnx.draw(G, pos=pos, with_labels=True)\nelabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "elabels",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "peekOfCode": "elabels = {(u, v): l for u, v, l in G.edges(data=\"char\")}\nnx.draw_networkx_edge_labels(G, pos, edge_labels=elabels)\n# A letter can be encoded by following the path from the given letter (node) to\n# the root node\ndef morse_encode(letter):\n    pred = next(G.predecessors(letter))  # Each letter has only 1 predecessor\n    symbol = G[pred][letter][\"char\"]\n    if pred != \"\":\n        return morse_encode(pred) + symbol  # Traversing the trie in reverse\n    return symbol",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_morse_trie",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "G = nx.Graph()\nG.add_edges_from(\n    [\n        (0, 1, {\"weight\": 4}),\n        (0, 7, {\"weight\": 8}),\n        (1, 7, {\"weight\": 11}),\n        (1, 2, {\"weight\": 8}),\n        (2, 8, {\"weight\": 2}),\n        (2, 5, {\"weight\": 4}),\n        (2, 3, {\"weight\": 7}),",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "T = nx.minimum_spanning_tree(G)\n# Visualize the graph and the minimum spanning tree\npos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "peekOfCode": "pos = nx.spring_layout(G)\nnx.draw_networkx_nodes(G, pos, node_color=\"lightblue\", node_size=500)\nnx.draw_networkx_edges(G, pos, edge_color=\"grey\")\nnx.draw_networkx_labels(G, pos, font_size=12, font_family=\"sans-serif\")\nnx.draw_networkx_edge_labels(\n    G, pos, edge_labels={(u, v): d[\"weight\"] for u, v, d in G.edges(data=True)}\n)\nnx.draw_networkx_edges(T, pos, edge_color=\"green\", width=2)\nplt.axis(\"off\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_mst",
        "documentation": {}
    },
    {
        "label": "minard_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "def minard_graph():\n    data1 = \"\"\"\\\n24.0,54.9,340000,A,1\n24.5,55.0,340000,A,1\n25.5,54.5,340000,A,1\n26.0,54.7,320000,A,1\n27.0,54.8,300000,A,1\n28.0,54.9,280000,A,1\n28.5,55.0,240000,A,1\n29.0,55.1,210000,A,1",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "peekOfCode": "colors = [\"b\", \"g\", \"r\"]\nfor G in g:\n    c = colors.pop(0)\n    node_size = [G.pop[n] // 300 for n in G]\n    nx.draw_networkx_edges(G, G.pos, edge_color=c, width=4, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=node_size, node_color=c, alpha=0.5)\n    nx.draw_networkx_nodes(G, G.pos, node_size=5, node_color=\"k\")\nfor c in city:\n    x, y = city[c]\n    plt.text(x, y + 0.1, c)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_napoleon_russian_campaign",
        "documentation": {}
    },
    {
        "label": "roget_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "def roget_graph():\n    \"\"\"Return the thesaurus graph from the roget.dat example in\n    the Stanford Graph Base.\n    \"\"\"\n    # open file roget_dat.txt.gz\n    fh = gzip.open(\"roget_dat.txt.gz\", \"r\")\n    G = nx.DiGraph()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):  # skip comments",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "G = roget_graph()\nprint(\"Loaded roget_dat.txt containing 1022 categories.\")\nprint(G)\nUG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "UG",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "UG = G.to_undirected()\nprint(nx.number_connected_components(UG), \"connected components\")\noptions = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "peekOfCode": "options = {\n    \"node_color\": \"black\",\n    \"node_size\": 1,\n    \"edge_color\": \"gray\",\n    \"linewidths\": 0,\n    \"width\": 0.1,\n}\nnx.draw_circular(UG, **options)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_roget",
        "documentation": {}
    },
    {
        "label": "triads",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "peekOfCode": "triads = {\n    \"003\": [],\n    \"012\": [(1, 2)],\n    \"102\": [(1, 2), (2, 1)],\n    \"021D\": [(3, 1), (3, 2)],\n    \"021U\": [(1, 3), (2, 3)],\n    \"021C\": [(1, 3), (3, 2)],\n    \"111D\": [(1, 2), (2, 1), (3, 1)],\n    \"111U\": [(1, 2), (2, 1), (1, 3)],\n    \"030T\": [(1, 2), (3, 2), (1, 3)],",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_triad_types",
        "documentation": {}
    },
    {
        "label": "generate_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def generate_graph(words):\n    G = nx.Graph(name=\"words\")\n    lookup = {c: lowercase.index(c) for c in lowercase}\n    def edit_distance_one(word):\n        for i in range(len(word)):\n            left, c, right = word[0:i], word[i], word[i + 1 :]\n            j = lookup[c]  # lowercase.index(c)\n            for cc in lowercase[j + 1 :]:\n                yield left + cc + right\n    candgen = (",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "words_graph",
        "kind": 2,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "def words_graph():\n    \"\"\"Return the words example graph from the Stanford GraphBase\"\"\"\n    fh = gzip.open(\"words_dat.txt.gz\", \"r\")\n    words = set()\n    for line in fh.readlines():\n        line = line.decode()\n        if line.startswith(\"*\"):\n            continue\n        w = str(line[0:5])\n        words.add(w)",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "G = words_graph()\nprint(\"Loaded words_dat.txt containing 5757 five-letter English words.\")\nprint(\"Two words are connected if they differ in one letter.\")\nprint(G)\nprint(f\"{nx.number_connected_components(G)} connected components\")\nfor source, target in [(\"chaos\", \"order\"), (\"nodes\", \"graph\"), (\"pound\", \"marks\")]:\n    print(f\"Shortest path between {source} and {target} is\")\n    try:\n        shortest_path = nx.shortest_path(G, source, target)\n        for n in shortest_path:",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "boundary",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "boundary = list(nx.node_boundary(G, shortest_path))\nG.add_nodes_from(shortest_path, color=\"red\")\nG.add_nodes_from(boundary, color=\"blue\")\nH = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "H",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "H = G.subgraph(shortest_path + boundary)\ncolors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "colors = nx.get_node_attributes(H, \"color\")\noptions = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "options",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "options = {\"node_size\": 1500, \"alpha\": 0.3, \"node_color\": colors.values()}\npos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "description": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "peekOfCode": "pos = nx.kamada_kawai_layout(H)\nnx.draw(H, pos, **options)\nnx.draw_networkx_labels(H, pos, font_weight=\"bold\")\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.graph.plot_words",
        "documentation": {}
    },
    {
        "label": "AntiGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "class AntiGraph(Graph):\n    \"\"\"\n    Class for complement graphs.\n    The main goal is to be able to work with big and dense graphs with\n    a low memory footprint.\n    In this class you add the edges that *do not exist* in the dense graph,\n    the report methods of the class return the neighbors, the edges and\n    the degree as if it was the dense graph. Thus it's possible to use\n    an instance of this class with some of NetworkX functions.\n    \"\"\"",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gnp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gnp = nx.gnp_random_graph(20, 0.8, seed=42)\nAnp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Anp",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Anp = AntiGraph(nx.complement(Gnp))\nGd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gd",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gd = nx.davis_southern_women_graph()\nAd = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ad",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ad = AntiGraph(nx.complement(Gd))\nGk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Gk",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Gk = nx.karate_club_graph()\nAk = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "Ak",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "Ak = AntiGraph(nx.complement(Gk))\npairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pairs",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pairs = [(Gnp, Anp), (Gd, Ad), (Gk, Ak)]\n# test connected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.connected_components(G)]\n    ac = [set(c) for c in nx.connected_components(A)]\n    for comp in ac:\n        assert comp in gc\n# test biconnected components\nfor G, A in pairs:\n    gc = [set(c) for c in nx.biconnected_components(G)]",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=268)  # Seed for reproducible layout\nnx.draw(Gnp, pos=pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_antigraph",
        "documentation": {}
    },
    {
        "label": "PrintGraph",
        "kind": 6,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "class PrintGraph(Graph):\n    \"\"\"\n    Example subclass of the Graph class.\n    Prints activity log to file or standard output.\n    \"\"\"\n    def __init__(self, data=None, name=\"\", file=None, **attr):\n        super().__init__(data=data, name=name, **attr)\n        if file is None:\n            import sys\n            self.fh = sys.stdout",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nG.add_node(\"foo\")\nG.add_nodes_from(\"bar\", weight=8)\nG.remove_node(\"b\")\nG.remove_nodes_from(\"ar\")\nprint(\"Nodes in G: \", G.nodes(data=True))\nG.add_edge(0, 1, weight=10)\nprint(\"Edges in G: \", G.edges(data=True))\nG.remove_edge(0, 1)\nG.add_edges_from(zip(range(0, 3), range(1, 4)), weight=10)",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "G",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "G = PrintGraph()\nnx.add_path(G, range(10))\nnx.add_star(G, range(9, 13))\npos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "pos",
        "kind": 5,
        "importPath": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "description": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "peekOfCode": "pos = nx.spring_layout(G, seed=225)  # Seed for reproducible layout\nnx.draw(G, pos)\nplt.show()",
        "detail": ".venv.share.doc.networkx-3.1.examples.subclass.plot_printgraph",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "kind": 6,
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "peekOfCode": "class ColorScheme(Lerpable):\n    def __init__(self, fg: Color, bg: Color, bg_contrast: Color):\n        self.fg = fg\n        self.bg = bg\n        self.bg_contrast = bg_contrast\n    def lerp(self, other, t):\n        return ColorScheme(\n            lerp_color(self.fg, other.fg, t),\n            lerp_color(self.bg, other.bg, t),\n            lerp_color(self.bg_contrast, other.bg_contrast, t),",
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "Director",
        "kind": 6,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "class Director:\n    def __init__(self):\n        self.scheme = LerpAnimator(random.choice(color_schemes), 4)\n        self.last_shift_time = time.time()\n        pars = [i for i in patch_bay if isinstance(i, LedPar)]\n        self.motionstrips = [i for i in patch_bay if isinstance(i, Motionstrip38)]\n        self.movers = [i for i in patch_bay if isinstance(i, ChauvetSpot160)]\n        self.interpreters: List[InterpreterBase] = [\n            LedParSlowRespond(LedParGroup(pars)),\n            *[MotionstripSlowRespond(i) for i in self.motionstrips],",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "SHIFT_AFTER",
        "kind": 5,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "SHIFT_AFTER = 2 * 60\nclass Director:\n    def __init__(self):\n        self.scheme = LerpAnimator(random.choice(color_schemes), 4)\n        self.last_shift_time = time.time()\n        pars = [i for i in patch_bay if isinstance(i, LedPar)]\n        self.motionstrips = [i for i in patch_bay if isinstance(i, Motionstrip38)]\n        self.movers = [i for i in patch_bay if isinstance(i, ChauvetSpot160)]\n        self.interpreters: List[InterpreterBase] = [\n            LedParSlowRespond(LedParGroup(pars)),",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "peekOfCode": "class Frame:\n    def __init__(self, **kwargs):\n        self.time = time.time()\n        self.all = kwargs.get(\"all\", 0)\n        self.drums = kwargs.get(\"drums\", 0)\n        self.bass = kwargs.get(\"bass\", 0)\n        self.kwargs = kwargs\n    def __getitem__(self, __name: str) -> Any:\n        return self.kwargs.get(__name)\n    def __str__(self):",
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "color_schemes",
        "kind": 5,
        "importPath": "parrot.director.schemes",
        "description": "parrot.director.schemes",
        "peekOfCode": "color_schemes = [\n    ColorScheme(Color(\"green\"), Color(\"blue\"), Color(\"blue\")),\n    ColorScheme(Color(\"white\"), Color(\"blue\"), Color(\"purple\")),\n    ColorScheme(Color(\"white\"), Color(\"red\"), Color(\"red\")),\n    ColorScheme(Color(\"white\"), Color(\"red\"), Color(\"purple\")),\n    ColorScheme(Color(\"white\"), Color(\"blue\"), Color(\"blue\")),\n    ColorScheme(Color(\"red\"), Color(\"blue\"), Color(\"blue\")),\n]",
        "detail": "parrot.director.schemes",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class InterpreterBase(Generic[T]):\n    def __init__(self, subject: T):\n        self.subject = subject\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\n    @classmethod\n    def category(cls) -> InterpretorCategory:\n        pass",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpretorCategory",
        "kind": 5,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "InterpretorCategory = Enum(\"InterpretorCategory\", [\"hype\", \"chill\"])\nT = TypeVar(\"T\", bound=FixtureBase)\nclass InterpreterBase(Generic[T]):\n    def __init__(self, subject: T):\n        self.subject = subject\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\n    @classmethod\n    def category(cls) -> InterpretorCategory:\n        pass",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "T = TypeVar(\"T\", bound=FixtureBase)\nclass InterpreterBase(Generic[T]):\n    def __init__(self, subject: T):\n        self.subject = subject\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\n    @classmethod\n    def category(cls) -> InterpretorCategory:\n        pass",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "LedParGroup",
        "kind": 6,
        "importPath": "parrot.interpreters.led_par_group",
        "description": "parrot.interpreters.led_par_group",
        "peekOfCode": "class LedParGroup:\n    def __init__(self, par_group: List[LedPar]):\n        self.par_group = par_group\nclass LedParSlowRespond(InterpreterBase[LedParGroup]):\n    def __init__(self, subject: LedParGroup):\n        super().__init__(subject)\n        self.dimmer_memory = 0\n    def step(self, frame: Frame, scheme: ColorScheme):\n        self.dimmer_memory = lerp(self.dimmer_memory, frame.all, 0.24)\n        for idx, par in enumerate(self.subject.par_group):",
        "detail": "parrot.interpreters.led_par_group",
        "documentation": {}
    },
    {
        "label": "LedParSlowRespond",
        "kind": 6,
        "importPath": "parrot.interpreters.led_par_group",
        "description": "parrot.interpreters.led_par_group",
        "peekOfCode": "class LedParSlowRespond(InterpreterBase[LedParGroup]):\n    def __init__(self, subject: LedParGroup):\n        super().__init__(subject)\n        self.dimmer_memory = 0\n    def step(self, frame: Frame, scheme: ColorScheme):\n        self.dimmer_memory = lerp(self.dimmer_memory, frame.all, 0.24)\n        for idx, par in enumerate(self.subject.par_group):\n            if idx % 2 == 0:\n                par.set_color(scheme.bg)\n            else:",
        "detail": "parrot.interpreters.led_par_group",
        "documentation": {}
    },
    {
        "label": "LedParSlowDecay",
        "kind": 6,
        "importPath": "parrot.interpreters.led_par_group",
        "description": "parrot.interpreters.led_par_group",
        "peekOfCode": "class LedParSlowDecay(InterpreterBase[LedParGroup]):\n    def __init__(self, subject: LedParGroup):\n        super().__init__(subject)\n        self.dimmer_memory = 0\n    def step(self, frame: Frame, scheme: ColorScheme):\n        self.dimmer_memory = max(lerp(self.dimmer_memory, 0, 0.1), frame.all)\n        for idx, par in enumerate(self.subject.par_group):\n            if idx % 2 == 0:\n                par.set_color(scheme.bg)\n            else:",
        "detail": "parrot.interpreters.led_par_group",
        "documentation": {}
    },
    {
        "label": "MotionstripWaveform",
        "kind": 6,
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "peekOfCode": "class MotionstripWaveform(InterpreterBase[Motionstrip38]):\n    def __init__(self, subject: Motionstrip38):\n        super().__init__(subject)\n        self.signal = \"vocals\"\n    def step(self, frame, scheme):\n        color = scheme.fg\n        parts = 4\n        self.subject.set_dimmer(255)\n        self.subject.set_pan(math.cos(frame.time) * 127 + 128)\n        for i in range(parts):",
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionstripSlowRespond",
        "kind": 6,
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "peekOfCode": "class MotionstripSlowRespond(InterpreterBase[Motionstrip38]):\n    def __init__(self, subject: Motionstrip38):\n        super().__init__(subject)\n        self.signal = \"sustained\"\n        self.dimmer_memory = 0\n        self.decay_rate = 0.1\n    def step(self, frame, scheme):\n        self.subject.set_pan(math.cos(frame.time) * 127 + 128)\n        if frame[self.signal] > 0.2:\n            self.dimmer_memory = lerp(",
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MoverBeat",
        "kind": 6,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "class MoverBeat(InterpreterBase[ChauvetSpot160]):\n    def __init__(self, subject: ChauvetSpot160):\n        super().__init__(subject)\n        self.signal = \"drums\"\n    def step(self, frame, scheme):\n        self.subject.set_color(scheme.fg)\n        if frame[\"sustained\"] > 0.7:\n            self.subject.set_dimmer(100)\n            self.subject.set_strobe(200)\n        elif frame[self.signal] > 0.2:",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "Demucs",
        "kind": 6,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "class Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() \n        self.snd_blocks = []",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "bundle",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "bundle = HDEMUCS_HIGH_MUSDB_PLUS\nmodel = bundle.get_model()\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "model = bundle.get_model()\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "sample_rate",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "sample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "sources_list",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "sources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "THRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "RATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "INPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "ACCEPTED_LATENCY",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "ACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef init_open_dmx(device):",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "int_clamp_list",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef init_open_dmx(device):\n    device.reset()\n    device.set_baudrate(3000000/12)\n    device.set_line_property(8, 2, \"N\")\n    device.set_flowctrl(\"\")\n    device.set_rts(False)\n    device.purge_rx_buffer()\n    device.purge_tx_buffer()",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "init_open_dmx",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def init_open_dmx(device):\n    device.reset()\n    device.set_baudrate(3000000/12)\n    device.set_line_property(8, 2, \"N\")\n    device.set_flowctrl(\"\")\n    device.set_rts(False)\n    device.purge_rx_buffer()\n    device.purge_tx_buffer()\ndef set_par(buffer, patch, r, g, b):\n    buffer[patch:patch+7] = int_clamp_list([",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "set_par",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def set_par(buffer, patch, r, g, b):\n    buffer[patch:patch+7] = int_clamp_list([\n        255, \n        r, \n        g, \n        b, \n        0, \n        0, \n        0\n    ])",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "set_mover",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def set_mover(buffer, patch, pan, tilt, speed=0, color=0, gobo=0, dimmer=255, shutter=6, function=0, macro=0):\n    pan_ts = pan/540*255\n    tilt_ts = tilt/270*255\n    buffer[patch:patch+11] = int_clamp_list([\n        pan_ts,\n        (pan_ts - round(pan_ts)) * 255,\n        tilt_ts,\n        (tilt_ts - round(tilt_ts)) * 255,\n        speed,\n        color,",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def main():\n    device_url = \"ftdi://ftdi:232:A10NI4B7/1\"\n    device = Ftdi.create_from_url(device_url)\n    init_open_dmx(device)\n    buffer = [int(0)]*512\n    frame = 0\n    fta = 1/16\n    while(True):\n        init_open_dmx(device)\n        set_par(buffer, 1,  clamp(128*math.sin(frame*fta)+128, 1, 255), clamp(128*math.cos(frame*fta)+128, 1, 255), 0)",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "def clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef set_par(patch, r, g, b):",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "int_clamp_list",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "def int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef set_par(patch, r, g, b):\n    values = int_clamp_list([\n        255, \n        r, \n        g, \n        b, \n        0, \n        0, ",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "set_par",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "def set_par(patch, r, g, b):\n    values = int_clamp_list([\n        255, \n        r, \n        g, \n        b, \n        0, \n        0, \n        0\n    ])",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "usb_path",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "usb_path = \"/dev/cu.usbserial-EN419206\"\nimport math\nfrom time import sleep\nfrom DMXEnttecPro import Controller\ndmx = Controller(usb_path)  # Typical of Linux\npar_patch = 19\ndef clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "dmx",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "dmx = Controller(usb_path)  # Typical of Linux\npar_patch = 19\ndef clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "par_patch",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "par_patch = 19\ndef clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "frame = 0\nwhile(True):\n    set_par(par_patch, math.sin(frame) * 128 + 128, 0, math.cos(frame) * 128 + 128)\n    sleep(0.1)\n    frame += 0.1",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "AudioHandler",
        "kind": 6,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "class AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() \n        self.snd_blocks = []\n        self.spectrogram_blocks = []",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() ",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "THRESHOLD = 0 # dB\nRATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "RATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "INPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "MicToDmxBasic",
        "kind": 6,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "class MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        # self.fig, (self.ax1, self.ax2) = plt.subplots(nrows=2, sharex=False)\n        self.power_max = 0\n        self.power_min = 99999999999999999\n        self.spectrogram_buffer = None",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        # self.fig, (self.ax1, self.ax2) = plt.subplots(nrows=2, sharex=False)\n        self.power_max = 0",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "THRESHOLD = 0  # dB\nRATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001  # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "RATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001  # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "INPUT_BLOCK_TIME = 30 * 0.001  # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "SHOW_PLOT",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "SHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "AudioHandler",
        "kind": 6,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "class AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() \n        self.snd_blocks = []",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "THRESHOLD = 0 # dB\nRATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "RATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "INPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "separator",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "separator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "kind": 6,
        "importPath": "parrot.patch.base",
        "description": "parrot.patch.base",
        "peekOfCode": "class FixtureBase:\n    def __init__(self, address, name, width):\n        self.address = address\n        self.name = name\n        self.width = width\n        self.values = [0 for i in range(width)]\n        self.color = Color(\"black\")\n    def set_color(self, color: Color):\n        self.color = color\n    def set_dimmer(self, value):",
        "detail": "parrot.patch.base",
        "documentation": {}
    },
    {
        "label": "ColorWheelEntry",
        "kind": 6,
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "peekOfCode": "class ColorWheelEntry:\n    def __init__(self, color: Color, dmx_value: int):\n        self.color = color\n        self.dmx_value = dmx_value\ncolor_wheel = [\n    ColorWheelEntry(Color(\"white\"), 0),\n    ColorWheelEntry(Color(\"red\"), 12),\n    ColorWheelEntry(Color(\"orange\"), 16),\n    ColorWheelEntry(Color(\"yellow\"), 22),\n    ColorWheelEntry(Color(\"green\"), 30),",
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160",
        "kind": 6,
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "peekOfCode": "class ChauvetSpot160(FixtureBase):\n    def __init__(\n        self, patch, pan_lower, pan_upper, tilt_lower, tilt_upper, dimmer_upper=255\n    ):\n        super().__init__(patch, \"chauvet intimidator 160\", 11)\n        self.pan_lower = pan_lower / 540 * 255\n        self.pan_upper = pan_upper / 540 * 255\n        self.pan_range = self.pan_upper - self.pan_lower\n        self.tilt_lower = tilt_lower / 229 * 255\n        self.tilt_upper = tilt_upper / 229 * 255",
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "peekOfCode": "dmx_layout = [\n    \"pan 0 -540\",\n    \"fine pan\",\n    \"tilt 0 - 229\",\n    \"fine tilt\",\n    \"pan/tilt speed\",\n    \"color wheel\",\n    \"gobo wheel\",\n    \"dimmer\",\n    \"shutter\",",
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "color_wheel",
        "kind": 5,
        "importPath": "parrot.patch.chauvet",
        "description": "parrot.patch.chauvet",
        "peekOfCode": "color_wheel = [\n    ColorWheelEntry(Color(\"white\"), 0),\n    ColorWheelEntry(Color(\"red\"), 12),\n    ColorWheelEntry(Color(\"orange\"), 16),\n    ColorWheelEntry(Color(\"yellow\"), 22),\n    ColorWheelEntry(Color(\"green\"), 30),\n    ColorWheelEntry(Color(\"blue\"), 37),\n    ColorWheelEntry(Color(\"AntiqueWhite\"), 46),\n    ColorWheelEntry(Color(\"cyan\"), 52),\n    ColorWheelEntry(Color(\"magenta\"), 58),",
        "detail": "parrot.patch.chauvet",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "kind": 6,
        "importPath": "parrot.patch.led_par",
        "description": "parrot.patch.led_par",
        "peekOfCode": "class LedPar(FixtureBase):\n    def __init__(self, patch):\n        super().__init__(patch, \"led par\", 7)\n    def set_dimmer(self, value):\n        self.values[0] = value\n    def set_strobe(self, value):\n        self.values[4] = value\n    def set_color(self, color):\n        super().set_color(color)\n        self.values[1] = color.red * 255",
        "detail": "parrot.patch.led_par",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "kind": 6,
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "peekOfCode": "class Motionstrip38(FixtureBase):\n    def __init__(self, patch, pan_lower, pan_upper):\n        super().__init__(patch, \"motionstrip 38\", 38)\n        self.pan_lower = pan_lower\n        self.pan_upper = pan_upper\n        self.pan_range = pan_upper - pan_lower\n        self.set_pan_speed(128)\n    def set_dimmer(self, value):\n        self.values[4] = value\n    def set_pan(self, value):",
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "color_to_rgbw",
        "kind": 2,
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "peekOfCode": "def color_to_rgbw(color: Color):\n    if color.get_saturation() < 0.1:\n        return (0, 0, 0, color.luminance * 255)\n    else:\n        return (color.red * 255, color.green * 255, color.blue * 255, 0)\nclass Motionstrip38(FixtureBase):\n    def __init__(self, patch, pan_lower, pan_upper):\n        super().__init__(patch, \"motionstrip 38\", 38)\n        self.pan_lower = pan_lower\n        self.pan_upper = pan_upper",
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.patch.motionstrip",
        "description": "parrot.patch.motionstrip",
        "peekOfCode": "dmx_layout = [\n    \"pan\",\n    \"pan_speed\",\n    [\"built_in_program\", 0],\n    \"built_in_program_speed\",\n    \"master_dimmer\",\n    \"strobe\" \"bulb 1: RGBW\",\n    \"bulb 2: RGBW\",\n    \"bulb 3: RGBW\",\n    \"bulb 4: RGBW\",",
        "detail": "parrot.patch.motionstrip",
        "documentation": {}
    },
    {
        "label": "patch_bay",
        "kind": 5,
        "importPath": "parrot.patch.patch_bay",
        "description": "parrot.patch.patch_bay",
        "peekOfCode": "patch_bay = [\n    ChauvetSpot160(1, 90, 270, 20, 100, 40),\n    LedPar(19),\n    LedPar(12),\n    LedPar(26),\n    LedPar(33),\n    Motionstrip38(59, 0, 128),\n]",
        "detail": "parrot.patch.patch_bay",
        "documentation": {}
    },
    {
        "label": "lerp_color",
        "kind": 2,
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "peekOfCode": "def lerp_color(a: Color, b: Color, t: float) -> Color:\n    return Color(\n        rgb=(lerp(a.red, b.red, t), lerp(a.green, b.green, t), lerp(a.blue, b.blue, t))\n    )",
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "C_HSL",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:\n            return rgb2hsl(tuple(v / 255. for v in COLOR_NAME_TO_RGB[label]))\n        raise AttributeError(\"%s instance has no attribute %r\"\n                             % (self.__class__, value))\nHSL = C_HSL()\nclass C_RGB:\n    \"\"\"RGB colors container",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "C_RGB",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class C_RGB:\n    \"\"\"RGB colors container\n    Provides a quick color access.\n    >>> from colour import RGB\n    >>> RGB.WHITE\n    (1.0, 1.0, 1.0)\n    >>> RGB.BLUE\n    (0.0, 0.0, 1.0)\n    >>> RGB.DONOTEXISTS  # doctest: +ELLIPSIS\n    Traceback (most recent call last):",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "C_HEX",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class C_HEX:\n    \"\"\"RGB colors container\n    Provides a quick color access.\n    >>> from colour import HEX\n    >>> HEX.WHITE\n    '#fff'\n    >>> HEX.BLUE\n    '#00f'\n    >>> HEX.DONOTEXISTS  # doctest: +ELLIPSIS\n    Traceback (most recent call last):",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class Color(object):\n    \"\"\"Abstraction of a color object\n    Color object keeps information of a color. It can input/output to different\n    format (HSL, RGB, HEX, WEB) and their partial representation.\n        >>> from colour import Color, HSL\n        >>> b = Color()\n        >>> b.hsl = HSL.BLUE\n    Access values\n    -------------\n        >>> b.hue  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hsl2rgb",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hsl2rgb(hsl):\n    \"\"\"Convert HSL representation towards RGB\n    :param h: Hue, position around the chromatic circle (h=1 equiv h=0)\n    :param s: Saturation, color saturation (0=full gray, 1=full color)\n    :param l: Ligthness, Overhaul lightness (0=full black, 1=full white)\n    :rtype: 3-uple for RGB values in float between 0 and 1\n    Hue, Saturation, Range from Lightness is a float between 0 and 1\n    Note that Hue can be set to any value but as it is a rotation\n    around the chromatic circle, any value above 1 or below 0 can\n    be expressed by a value between 0 and 1 (Note that h=0 is equiv",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "rgb2hsl",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def rgb2hsl(rgb):\n    \"\"\"Convert RGB representation towards HSL\n    :param r: Red amount (float between 0 and 1)\n    :param g: Green amount (float between 0 and 1)\n    :param b: Blue amount (float between 0 and 1)\n    :rtype: 3-uple for HSL values in float between 0 and 1\n    This algorithm came from:\n    http://www.easyrgb.com/index.php?X=MATH&H=19#text19\n    Here are some quick notion of RGB to HSL conversion:\n    >>> from colour import rgb2hsl",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "rgb2hex",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def rgb2hex(rgb, force_long=False):\n    \"\"\"Transform RGB tuple to hex RGB representation\n    :param rgb: RGB 3-uple of float between 0 and 1\n    :rtype: 3 hex char or 6 hex char string representation\n    Usage\n    -----\n    >>> from colour import rgb2hex\n    >>> rgb2hex((0.0,1.0,0.0))\n    '#0f0'\n    Rounding try to be as natural as possible:",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hex2rgb",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hex2rgb(str_rgb):\n    \"\"\"Transform hex RGB representation to RGB tuple\n    :param str_rgb: 3 hex char or 6 hex char string representation\n    :rtype: RGB 3-uple of float between 0 and 1\n    >>> from colour import hex2rgb\n    >>> hex2rgb('#00ff00')\n    (0.0, 1.0, 0.0)\n    >>> hex2rgb('#0f0')\n    (0.0, 1.0, 0.0)\n    >>> hex2rgb('#aaa')  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hex2web",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hex2web(hex):\n    \"\"\"Converts HEX representation to WEB\n    :param rgb: 3 hex char or 6 hex char string representation\n    :rtype: web string representation (human readable if possible)\n    WEB representation uses X11 rgb.txt to define conversion\n    between RGB and english color names.\n    Usage\n    =====\n    >>> from colour import hex2web\n    >>> hex2web('#ff0000')",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "web2hex",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def web2hex(web, force_long=False):\n    \"\"\"Converts WEB representation to HEX\n    :param rgb: web string representation (human readable if possible)\n    :rtype: 3 hex char or 6 hex char string representation\n    WEB representation uses X11 rgb.txt to define conversion\n    between RGB and english color names.\n    Usage\n    =====\n    >>> from colour import web2hex\n    >>> web2hex('red')",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "color_scale",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))\n    ...  for hsl in color_scale((0, 0, 0),\n    ...                         (0, 0, 1),\n    ...                         15)]  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB_color_picker",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def RGB_color_picker(obj):\n    \"\"\"Build a color representation from the string representation of an object\n    This allows to quickly get a color from some data, with the\n    additional benefit that the color will be the same as long as the\n    (string representation of the) data is the same::\n        >>> from colour import RGB_color_picker, Color\n    Same inputs produce the same result::\n        >>> RGB_color_picker(\"Something\") == RGB_color_picker(\"Something\")\n        True\n    ... but different inputs produce different colors::",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hash_or_str",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hash_or_str(obj):\n    try:\n        return hash((type(obj).__name__, obj))\n    except TypeError:\n        ## Adds the type name to make sure two object of different type but\n        ## identical string representation get distinguished.\n        return type(obj).__name__ + str(obj)\n##\n## All purpose object\n##",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "make_color_factory",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def make_color_factory(**kwargs_defaults):\n    def ColorFactory(*args, **kwargs):\n        new_kwargs = kwargs_defaults.copy()\n        new_kwargs.update(kwargs)\n        return Color(*args, **new_kwargs)\n    return ColorFactory",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "FLOAT_ERROR",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "FLOAT_ERROR = 0.0000005\nRGB_TO_COLOR_NAMES = {\n    (0, 0, 0): ['Black'],\n    (0, 0, 128): ['Navy', 'NavyBlue'],\n    (0, 0, 139): ['DarkBlue'],\n    (0, 0, 205): ['MediumBlue'],\n    (0, 0, 255): ['Blue'],\n    (0, 100, 0): ['DarkGreen'],\n    (0, 128, 0): ['Green'],\n    (0, 139, 139): ['DarkCyan'],",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB_TO_COLOR_NAMES",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "RGB_TO_COLOR_NAMES = {\n    (0, 0, 0): ['Black'],\n    (0, 0, 128): ['Navy', 'NavyBlue'],\n    (0, 0, 139): ['DarkBlue'],\n    (0, 0, 205): ['MediumBlue'],\n    (0, 0, 255): ['Blue'],\n    (0, 100, 0): ['DarkGreen'],\n    (0, 128, 0): ['Green'],\n    (0, 139, 139): ['DarkCyan'],\n    (0, 191, 255): ['DeepSkyBlue'],",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "COLOR_NAME_TO_RGB",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "COLOR_NAME_TO_RGB = dict(\n    (name.lower(), rgb)\n    for rgb, names in RGB_TO_COLOR_NAMES.items()\n    for name in names)\nLONG_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{6}$')\nSHORT_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{3}$')\nclass C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "LONG_HEX_COLOR",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "LONG_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{6}$')\nSHORT_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{3}$')\nclass C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:\n            return rgb2hsl(tuple(v / 255. for v in COLOR_NAME_TO_RGB[label]))\n        raise AttributeError(\"%s instance has no attribute %r\"\n                             % (self.__class__, value))\nHSL = C_HSL()",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "SHORT_HEX_COLOR",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "SHORT_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{3}$')\nclass C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:\n            return rgb2hsl(tuple(v / 255. for v in COLOR_NAME_TO_RGB[label]))\n        raise AttributeError(\"%s instance has no attribute %r\"\n                             % (self.__class__, value))\nHSL = C_HSL()\nclass C_RGB:",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "HSL",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "HSL = C_HSL()\nclass C_RGB:\n    \"\"\"RGB colors container\n    Provides a quick color access.\n    >>> from colour import RGB\n    >>> RGB.WHITE\n    (1.0, 1.0, 1.0)\n    >>> RGB.BLUE\n    (0.0, 0.0, 1.0)\n    >>> RGB.DONOTEXISTS  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "RGB = C_RGB()\nHEX = C_HEX()\n##\n## Conversion function\n##\ndef hsl2rgb(hsl):\n    \"\"\"Convert HSL representation towards RGB\n    :param h: Hue, position around the chromatic circle (h=1 equiv h=0)\n    :param s: Saturation, color saturation (0=full gray, 1=full color)\n    :param l: Ligthness, Overhaul lightness (0=full black, 1=full white)",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "HEX",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "HEX = C_HEX()\n##\n## Conversion function\n##\ndef hsl2rgb(hsl):\n    \"\"\"Convert HSL representation towards RGB\n    :param h: Hue, position around the chromatic circle (h=1 equiv h=0)\n    :param s: Saturation, color saturation (0=full gray, 1=full color)\n    :param l: Ligthness, Overhaul lightness (0=full black, 1=full white)\n    :rtype: 3-uple for RGB values in float between 0 and 1",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hsl2hex",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "hsl2hex = lambda x: rgb2hex(hsl2rgb(x))\nhex2hsl = lambda x: rgb2hsl(hex2rgb(x))\nrgb2web = lambda x: hex2web(rgb2hex(x))\nweb2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hex2hsl",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "hex2hsl = lambda x: rgb2hsl(hex2rgb(x))\nrgb2web = lambda x: hex2web(rgb2hex(x))\nweb2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "rgb2web",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "rgb2web = lambda x: hex2web(rgb2hex(x))\nweb2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "web2rgb",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "web2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "web2hsl",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "web2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))\n    ...  for hsl in color_scale((0, 0, 0),",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hsl2web",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "hsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))\n    ...  for hsl in color_scale((0, 0, 0),\n    ...                         (0, 0, 1),",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB_equivalence",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "RGB_equivalence = lambda c1, c2: c1.hex_l == c2.hex_l\nHSL_equivalence = lambda c1, c2: c1._hsl == c2._hsl\ndef make_color_factory(**kwargs_defaults):\n    def ColorFactory(*args, **kwargs):\n        new_kwargs = kwargs_defaults.copy()\n        new_kwargs.update(kwargs)\n        return Color(*args, **new_kwargs)\n    return ColorFactory",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "HSL_equivalence",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "HSL_equivalence = lambda c1, c2: c1._hsl == c2._hsl\ndef make_color_factory(**kwargs_defaults):\n    def ColorFactory(*args, **kwargs):\n        new_kwargs = kwargs_defaults.copy()\n        new_kwargs.update(kwargs)\n        return Color(*args, **new_kwargs)\n    return ColorFactory",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef dmx_clamp(n):\n    if math.isnan(n):\n        return 0",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "dmx_clamp",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def dmx_clamp(n):\n    if math.isnan(n):\n        return 0\n    return int(clamp(n, 0, 255))\ndef dmx_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\nusb_path = \"/dev/cu.usbserial-EN419206\"\ndef get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "dmx_clamp_list",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def dmx_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\nusb_path = \"/dev/cu.usbserial-EN419206\"\ndef get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()\n    return Controller(usb_path)  # Typical of Linux",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "get_controller",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()\n    return Controller(usb_path)  # Typical of Linux",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "usb_path",
        "kind": 5,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "usb_path = \"/dev/cu.usbserial-EN419206\"\ndef get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()\n    return Controller(usb_path)  # Typical of Linux",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "Lerpable",
        "kind": 6,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "class Lerpable:\n    def lerp(self, other, t):\n        raise NotImplementedError()\nclass LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject\n        self.target = None\n        self.duration = duration\n        self.start_time = None\n    def push(self, target):",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "LerpAnimator",
        "kind": 6,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "class LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject\n        self.target = None\n        self.duration = duration\n        self.start_time = None\n    def push(self, target):\n        self.target = target\n        self.start_time = time.time()\n    def render(self):",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "kind": 2,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "def lerp(a, b, t):\n    return a + (b - a) * t\ndef lerp_list(a, b, t):\n    return [lerp(i, j, t) for i, j in zip(a, b)]\nclass Lerpable:\n    def lerp(self, other, t):\n        raise NotImplementedError()\nclass LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp_list",
        "kind": 2,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "def lerp_list(a, b, t):\n    return [lerp(i, j, t) for i, j in zip(a, b)]\nclass Lerpable:\n    def lerp(self, other, t):\n        raise NotImplementedError()\nclass LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject\n        self.target = None\n        self.duration = duration",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "MockDmxController",
        "kind": 6,
        "importPath": "parrot.utils.mock_controller",
        "description": "parrot.utils.mock_controller",
        "peekOfCode": "class MockDmxController:\n    def __init__(self):\n        pass\n    def set_channel(self, channel, value):\n        pass\n    def submit(self):\n        pass",
        "detail": "parrot.utils.mock_controller",
        "documentation": {}
    }
]