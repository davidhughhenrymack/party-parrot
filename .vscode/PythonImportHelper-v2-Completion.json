[
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "isExtraImport": true,
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Lerpable",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "LerpAnimator",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "isExtraImport": true,
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp_color",
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "isExtraImport": true,
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "color_distance",
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "isExtraImport": true,
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "color_distance",
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "isExtraImport": true,
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "dim_color",
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "isExtraImport": true,
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "dim_color",
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "isExtraImport": true,
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "isExtraImport": true,
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "sleep",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Any",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Dict",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Generic",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "TypeVar",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "isExtraImport": true,
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "patch_bay",
        "importPath": "parrot.patch_bay",
        "description": "parrot.patch_bay",
        "isExtraImport": true,
        "detail": "parrot.patch_bay",
        "documentation": {}
    },
    {
        "label": "patch_bay",
        "importPath": "parrot.patch_bay",
        "description": "parrot.patch_bay",
        "isExtraImport": true,
        "detail": "parrot.patch_bay",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160_12Ch",
        "importPath": "parrot.fixtures.chauvet",
        "description": "parrot.fixtures.chauvet",
        "isExtraImport": true,
        "detail": "parrot.fixtures.chauvet",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot120_12Ch",
        "importPath": "parrot.fixtures.chauvet",
        "description": "parrot.fixtures.chauvet",
        "isExtraImport": true,
        "detail": "parrot.fixtures.chauvet",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.fixtures.led_par",
        "description": "parrot.fixtures.led_par",
        "isExtraImport": true,
        "detail": "parrot.fixtures.led_par",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.fixtures.led_par",
        "description": "parrot.fixtures.led_par",
        "isExtraImport": true,
        "detail": "parrot.fixtures.led_par",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "Motionstrip",
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "color_schemes",
        "importPath": "parrot.director.color_schemes",
        "description": "parrot.director.color_schemes",
        "isExtraImport": true,
        "detail": "parrot.director.color_schemes",
        "documentation": {}
    },
    {
        "label": "MoverBeatAndCircle",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverBeatAndCircle",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverDimAndCircle",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverGroupBeatInFan",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverSequenceAndCircle",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverSequenceInFan",
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "isExtraImport": true,
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "MoveCircles",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "ColorFg",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Dimmer30",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "FlashBeat",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "MoveCircles",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "isExtraImport": true,
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupSlowRespond",
        "importPath": "parrot.interpreters.slow",
        "description": "parrot.interpreters.slow",
        "isExtraImport": true,
        "detail": "parrot.interpreters.slow",
        "documentation": {}
    },
    {
        "label": "GroupSlowDecay",
        "importPath": "parrot.interpreters.slow",
        "description": "parrot.interpreters.slow",
        "isExtraImport": true,
        "detail": "parrot.interpreters.slow",
        "documentation": {}
    },
    {
        "label": "GroupSlowRespond",
        "importPath": "parrot.interpreters.slow",
        "description": "parrot.interpreters.slow",
        "isExtraImport": true,
        "detail": "parrot.interpreters.slow",
        "documentation": {}
    },
    {
        "label": "MotionstripSlowRespond",
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionStripBulbBeatAndWiggle",
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionstripSlowRespond",
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "isExtraImport": true,
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "DimmerBinaryLatched",
        "importPath": "parrot.interpreters.latched",
        "description": "parrot.interpreters.latched",
        "isExtraImport": true,
        "detail": "parrot.interpreters.latched",
        "documentation": {}
    },
    {
        "label": "DimmerFadeLatched",
        "importPath": "parrot.interpreters.latched",
        "description": "parrot.interpreters.latched",
        "isExtraImport": true,
        "detail": "parrot.interpreters.latched",
        "documentation": {}
    },
    {
        "label": "FiveBeamLaser",
        "importPath": "parrot.fixtures.uking.laser",
        "description": "parrot.fixtures.uking.laser",
        "isExtraImport": true,
        "detail": "parrot.fixtures.uking.laser",
        "documentation": {}
    },
    {
        "label": "TwoBeamLaser",
        "importPath": "parrot.fixtures.oultia.laser",
        "description": "parrot.fixtures.oultia.laser",
        "isExtraImport": true,
        "detail": "parrot.fixtures.oultia.laser",
        "documentation": {}
    },
    {
        "label": "parrot.fixtures",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160_12Ch",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot120_12Ch",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "FiveBeamLaser",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "TwoBeamLaser",
        "importPath": "parrot.fixtures",
        "description": "parrot.fixtures",
        "isExtraImport": true,
        "detail": "parrot.fixtures",
        "documentation": {}
    },
    {
        "label": "MovingHead",
        "importPath": "parrot.fixtures.moving_head",
        "description": "parrot.fixtures.moving_head",
        "isExtraImport": true,
        "detail": "parrot.fixtures.moving_head",
        "documentation": {}
    },
    {
        "label": "MovingHead",
        "importPath": "parrot.fixtures.moving_head",
        "description": "parrot.fixtures.moving_head",
        "isExtraImport": true,
        "detail": "parrot.fixtures.moving_head",
        "documentation": {}
    },
    {
        "label": "MovingHead",
        "importPath": "parrot.fixtures.moving_head",
        "description": "parrot.fixtures.moving_head",
        "isExtraImport": true,
        "detail": "parrot.fixtures.moving_head",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "parrot.fixtures.laser",
        "description": "parrot.fixtures.laser",
        "isExtraImport": true,
        "detail": "parrot.fixtures.laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "parrot.fixtures.laser",
        "description": "parrot.fixtures.laser",
        "isExtraImport": true,
        "detail": "parrot.fixtures.laser",
        "documentation": {}
    },
    {
        "label": "Laser",
        "importPath": "parrot.fixtures.laser",
        "description": "parrot.fixtures.laser",
        "isExtraImport": true,
        "detail": "parrot.fixtures.laser",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "GoboWheelEntry",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "ColorWheelEntry",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot_12Ch",
        "importPath": "parrot.fixtures.chauvet.base",
        "description": "parrot.fixtures.chauvet.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.chauvet.base",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot_12Ch",
        "importPath": "parrot.fixtures.chauvet.base",
        "description": "parrot.fixtures.chauvet.base",
        "isExtraImport": true,
        "detail": "parrot.fixtures.chauvet.base",
        "documentation": {}
    },
    {
        "label": "dmx_clamp",
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "isExtraImport": true,
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "clamp",
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "isExtraImport": true,
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "get_controller",
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "isExtraImport": true,
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "tkinter",
        "description": "tkinter",
        "isExtraImport": true,
        "detail": "tkinter",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "parrot.state",
        "description": "parrot.state",
        "isExtraImport": true,
        "detail": "parrot.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "parrot.state",
        "description": "parrot.state",
        "isExtraImport": true,
        "detail": "parrot.state",
        "documentation": {}
    },
    {
        "label": "Enum",
        "importPath": "enum",
        "description": "enum",
        "isExtraImport": true,
        "detail": "enum",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ensure_groupify",
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "isExtraImport": true,
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "groupify",
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "isExtraImport": true,
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "SequenceDimmers",
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "isExtraImport": true,
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "GroupCombo",
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "isExtraImport": true,
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "comboify",
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "isExtraImport": true,
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "group_comboify",
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "isExtraImport": true,
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "pyaudio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyaudio",
        "description": "pyaudio",
        "detail": "pyaudio",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "signal",
        "importPath": "scipy",
        "description": "scipy",
        "isExtraImport": true,
        "detail": "scipy",
        "documentation": {}
    },
    {
        "label": "matplotlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib",
        "description": "matplotlib",
        "detail": "matplotlib",
        "documentation": {}
    },
    {
        "label": "matplotlib.pyplot",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "matplotlib.pyplot",
        "description": "matplotlib.pyplot",
        "detail": "matplotlib.pyplot",
        "documentation": {}
    },
    {
        "label": "torch",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "torch",
        "description": "torch",
        "detail": "torch",
        "documentation": {}
    },
    {
        "label": "HDEMUCS_HIGH_MUSDB_PLUS",
        "importPath": "torchaudio.pipelines",
        "description": "torchaudio.pipelines",
        "isExtraImport": true,
        "detail": "torchaudio.pipelines",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "write",
        "importPath": "scipy.io.wavfile",
        "description": "scipy.io.wavfile",
        "isExtraImport": true,
        "detail": "scipy.io.wavfile",
        "documentation": {}
    },
    {
        "label": "Director",
        "importPath": "director.director",
        "description": "director.director",
        "isExtraImport": true,
        "detail": "director.director",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "director.director",
        "description": "director.director",
        "isExtraImport": true,
        "detail": "director.director",
        "documentation": {}
    },
    {
        "label": "get_controller",
        "importPath": "utils.dmx_utils",
        "description": "utils.dmx_utils",
        "isExtraImport": true,
        "detail": "utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Ftdi",
        "importPath": "pyftdi.ftdi",
        "description": "pyftdi.ftdi",
        "isExtraImport": true,
        "detail": "pyftdi.ftdi",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "DMXEnttecPro",
        "description": "DMXEnttecPro",
        "isExtraImport": true,
        "detail": "DMXEnttecPro",
        "documentation": {}
    },
    {
        "label": "Controller",
        "importPath": "DMXEnttecPro",
        "description": "DMXEnttecPro",
        "isExtraImport": true,
        "detail": "DMXEnttecPro",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "LogNorm",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "LogNorm",
        "importPath": "matplotlib.colors",
        "description": "matplotlib.colors",
        "isExtraImport": true,
        "detail": "matplotlib.colors",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Director",
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "isExtraImport": true,
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "Frame",
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "isExtraImport": true,
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "parrot.gui.gui",
        "description": "parrot.gui.gui",
        "isExtraImport": true,
        "detail": "parrot.gui.gui",
        "documentation": {}
    },
    {
        "label": "Separator",
        "importPath": "spleeter.separator",
        "description": "spleeter.separator",
        "isExtraImport": true,
        "detail": "spleeter.separator",
        "documentation": {}
    },
    {
        "label": "with_statement",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "hashlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "hashlib",
        "description": "hashlib",
        "detail": "hashlib",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "MockDmxController",
        "importPath": "parrot.utils.mock_controller",
        "description": "parrot.utils.mock_controller",
        "isExtraImport": true,
        "detail": "parrot.utils.mock_controller",
        "documentation": {}
    },
    {
        "label": "traceback",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "traceback",
        "description": "traceback",
        "detail": "traceback",
        "documentation": {}
    },
    {
        "label": "MicToDmxBasic",
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "isExtraImport": true,
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "Demucs",
        "importPath": "listeners.demucs",
        "description": "listeners.demucs",
        "isExtraImport": true,
        "detail": "listeners.demucs",
        "documentation": {}
    },
    {
        "label": "ColorScheme",
        "kind": 6,
        "importPath": "parrot.director.color_scheme",
        "description": "parrot.director.color_scheme",
        "peekOfCode": "class ColorScheme(Lerpable):\n    def __init__(self, fg: Color, bg: Color, bg_contrast: Color):\n        self.fg = fg\n        self.bg = bg\n        self.bg_contrast = bg_contrast\n    def lerp(self, other, t):\n        return ColorScheme(\n            lerp_color(self.fg, other.fg, t),\n            lerp_color(self.bg, other.bg, t),\n            lerp_color(self.bg_contrast, other.bg_contrast, t),",
        "detail": "parrot.director.color_scheme",
        "documentation": {}
    },
    {
        "label": "scheme_tropical",
        "kind": 5,
        "importPath": "parrot.director.color_schemes",
        "description": "parrot.director.color_schemes",
        "peekOfCode": "scheme_tropical = [\n    ColorScheme(Color(\"green\"), Color(\"blue\"), Color(\"blue\")),\n    ColorScheme(Color(\"white\"), Color(\"blue\"), Color(\"purple\")),\n    ColorScheme(Color(\"white\"), Color(\"green\"), Color(\"purple\")),\n    ColorScheme(Color(\"white\"), Color(\"green\"), Color(\"yellow\")),\n    ColorScheme(Color(\"magenta\"), Color(\"blue\"), Color(\"purple\")),\n    ColorScheme(Color(\"blue\"), Color(\"purple\"), Color(\"purple\")),\n]\nscheme_standard = [\n    ColorScheme(Color(\"green\"), Color(\"blue\"), Color(\"blue\")),",
        "detail": "parrot.director.color_schemes",
        "documentation": {}
    },
    {
        "label": "scheme_standard",
        "kind": 5,
        "importPath": "parrot.director.color_schemes",
        "description": "parrot.director.color_schemes",
        "peekOfCode": "scheme_standard = [\n    ColorScheme(Color(\"green\"), Color(\"blue\"), Color(\"blue\")),\n    ColorScheme(Color(\"white\"), Color(\"blue\"), Color(\"purple\")),\n    ColorScheme(Color(\"white\"), Color(\"red\"), Color(\"red\")),\n    ColorScheme(Color(\"white\"), Color(\"red\"), Color(\"purple\")),\n    ColorScheme(Color(\"red\"), Color(\"blue\"), Color(\"blue\")),\n    ColorScheme(Color(\"magenta\"), Color(\"blue\"), Color(\"purple\")),\n    ColorScheme(Color(\"blue\"), Color(\"purple\"), Color(\"purple\")),\n]\ncolor_schemes = scheme_tropical",
        "detail": "parrot.director.color_schemes",
        "documentation": {}
    },
    {
        "label": "color_schemes",
        "kind": 5,
        "importPath": "parrot.director.color_schemes",
        "description": "parrot.director.color_schemes",
        "peekOfCode": "color_schemes = scheme_tropical",
        "detail": "parrot.director.color_schemes",
        "documentation": {}
    },
    {
        "label": "Director",
        "kind": 6,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "class Director:\n    def __init__(self):\n        self.scheme = LerpAnimator(random.choice(color_schemes), 4)\n        self.last_shift_time = time.time()\n        self.start_time = time.time()\n        pars = [i for i in patch_bay if isinstance(i, LedPar)]\n        inferred = [get_interpreter(i) for i in patch_bay]\n        self.interpreters: List[InterpreterBase] = [\n            GroupSlowRespond(pars),\n        ] + filter_nones(inferred)",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "get_interpreter",
        "kind": 2,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "def get_interpreter(f):\n    for k, v in interpreters.items():\n        if isinstance(f, k):\n            return v(f)\n    return None\ndef filter_nones(l):\n    return [i for i in l if i is not None]\nclass Director:\n    def __init__(self):\n        self.scheme = LerpAnimator(random.choice(color_schemes), 4)",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "filter_nones",
        "kind": 2,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "def filter_nones(l):\n    return [i for i in l if i is not None]\nclass Director:\n    def __init__(self):\n        self.scheme = LerpAnimator(random.choice(color_schemes), 4)\n        self.last_shift_time = time.time()\n        self.start_time = time.time()\n        pars = [i for i in patch_bay if isinstance(i, LedPar)]\n        inferred = [get_interpreter(i) for i in patch_bay]\n        self.interpreters: List[InterpreterBase] = [",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "SHIFT_AFTER",
        "kind": 5,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "SHIFT_AFTER = 2 * 60\nWARMUP_SECONDS = 40\nMAX_INTENSITY = 1\ninterpreters = {\n    Motionstrip38: MotionstripSlowRespond,\n    ChauvetSpot160_12Ch: MoverBeatAndCircle,\n    ChauvetSpot120_12Ch: MoverBeatAndCircle,\n    FiveBeamLaser: DimmerBinaryLatched,\n    TwoBeamLaser: DimmerBinaryLatched,\n}",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "WARMUP_SECONDS",
        "kind": 5,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "WARMUP_SECONDS = 40\nMAX_INTENSITY = 1\ninterpreters = {\n    Motionstrip38: MotionstripSlowRespond,\n    ChauvetSpot160_12Ch: MoverBeatAndCircle,\n    ChauvetSpot120_12Ch: MoverBeatAndCircle,\n    FiveBeamLaser: DimmerBinaryLatched,\n    TwoBeamLaser: DimmerBinaryLatched,\n}\ndef get_interpreter(f):",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "MAX_INTENSITY",
        "kind": 5,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "MAX_INTENSITY = 1\ninterpreters = {\n    Motionstrip38: MotionstripSlowRespond,\n    ChauvetSpot160_12Ch: MoverBeatAndCircle,\n    ChauvetSpot120_12Ch: MoverBeatAndCircle,\n    FiveBeamLaser: DimmerBinaryLatched,\n    TwoBeamLaser: DimmerBinaryLatched,\n}\ndef get_interpreter(f):\n    for k, v in interpreters.items():",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "interpreters",
        "kind": 5,
        "importPath": "parrot.director.director",
        "description": "parrot.director.director",
        "peekOfCode": "interpreters = {\n    Motionstrip38: MotionstripSlowRespond,\n    ChauvetSpot160_12Ch: MoverBeatAndCircle,\n    ChauvetSpot120_12Ch: MoverBeatAndCircle,\n    FiveBeamLaser: DimmerBinaryLatched,\n    TwoBeamLaser: DimmerBinaryLatched,\n}\ndef get_interpreter(f):\n    for k, v in interpreters.items():\n        if isinstance(f, k):",
        "detail": "parrot.director.director",
        "documentation": {}
    },
    {
        "label": "Frame",
        "kind": 6,
        "importPath": "parrot.director.frame",
        "description": "parrot.director.frame",
        "peekOfCode": "class Frame:\n    def __init__(self, **kwargs):\n        self.time = time.time()\n        self.all = kwargs.get(\"all\", 0)\n        self.drums = kwargs.get(\"drums\", 0)\n        self.bass = kwargs.get(\"bass\", 0)\n        self.kwargs = kwargs\n    def __getitem__(self, __name: str) -> Any:\n        return self.kwargs.get(__name)\n    def __str__(self):",
        "detail": "parrot.director.frame",
        "documentation": {}
    },
    {
        "label": "]",
        "kind": 5,
        "importPath": "parrot.director.phrase_interpretations",
        "description": "parrot.director.phrase_interpretations",
        "peekOfCode": "] = {\n    Phrase.intro_outro: {\n        LedPar: [GroupSlowDecay, GroupSlowRespond],\n    },\n    Phrase.build: {\n        # LEDs off\n        # Moving heads flashing beat, (drawing circles / fixed position)\n        # Motion strip off or bulb flashing to the beat\n        MovingHead: [MoverBeatAndCircle, MoverGroupBeatInFan],\n        Motionstrip: [MotionStripBulbBeatAndWiggle],",
        "detail": "parrot.director.phrase_interpretations",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot_12Ch",
        "kind": 6,
        "importPath": "parrot.fixtures.chauvet.base",
        "description": "parrot.fixtures.chauvet.base",
        "peekOfCode": "class ChauvetSpot_12Ch(MovingHead):\n    def __init__(\n        self,\n        patch,\n        name,\n        width,\n        dmx_layout,\n        color_wheel,\n        gobo_wheel,\n        pan_lower=270,",
        "detail": "parrot.fixtures.chauvet.base",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot120_12Ch",
        "kind": 6,
        "importPath": "parrot.fixtures.chauvet.chauvet120",
        "description": "parrot.fixtures.chauvet.chauvet120",
        "peekOfCode": "class ChauvetSpot120_12Ch(ChauvetSpot_12Ch):\n    def __init__(\n        self,\n        patch,\n        pan_lower=270,\n        pan_upper=450,\n        tilt_lower=0,\n        tilt_upper=90,\n        dimmer_upper=255,\n    ):",
        "detail": "parrot.fixtures.chauvet.chauvet120",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.fixtures.chauvet.chauvet120",
        "description": "parrot.fixtures.chauvet.chauvet120",
        "peekOfCode": "dmx_layout = {\n    \"pan_coarse\": 0,\n    \"pan_fine\": 1,\n    \"tilt_coarse\": 2,\n    \"tilt_fine\": 3,\n    \"speed\": 4,\n    \"color_wheel\": 5,\n    \"shutter\": 6,\n    \"dimmer\": 7,\n    \"gobo_wheel\": 8,",
        "detail": "parrot.fixtures.chauvet.chauvet120",
        "documentation": {}
    },
    {
        "label": "color_wheel",
        "kind": 5,
        "importPath": "parrot.fixtures.chauvet.chauvet120",
        "description": "parrot.fixtures.chauvet.chauvet120",
        "peekOfCode": "color_wheel = [\n    ColorWheelEntry(Color(\"white\"), 0),\n    ColorWheelEntry(Color(\"red\"), 40),\n    ColorWheelEntry(Color(\"green\"), 70),\n    ColorWheelEntry(Color(\"blue\"), 100),\n    ColorWheelEntry(Color(\"yellow\"), 140),\n    ColorWheelEntry(Color(\"magenta\"), 170),\n    ColorWheelEntry(Color(\"AntiqueWhite\"), 200),\n    ColorWheelEntry(Color(\"cyan\"), 230),\n]",
        "detail": "parrot.fixtures.chauvet.chauvet120",
        "documentation": {}
    },
    {
        "label": "gobo_wheel",
        "kind": 5,
        "importPath": "parrot.fixtures.chauvet.chauvet120",
        "description": "parrot.fixtures.chauvet.chauvet120",
        "peekOfCode": "gobo_wheel = [\n    GoboWheelEntry(\"open\", 0),\n    GoboWheelEntry(\"wood\", 40),\n    GoboWheelEntry(\"spiral\", 80),\n    GoboWheelEntry(\"dots\", 110),\n    GoboWheelEntry(\"squares\", 150),\n    GoboWheelEntry(\"three\", 180),\n    GoboWheelEntry(\"circles\", 200),\n    GoboWheelEntry(\"ring\", 255),\n]",
        "detail": "parrot.fixtures.chauvet.chauvet120",
        "documentation": {}
    },
    {
        "label": "ChauvetSpot160_12Ch",
        "kind": 6,
        "importPath": "parrot.fixtures.chauvet.chauvet160",
        "description": "parrot.fixtures.chauvet.chauvet160",
        "peekOfCode": "class ChauvetSpot160_12Ch(ChauvetSpot_12Ch):\n    def __init__(\n        self,\n        patch,\n        pan_lower=360,\n        pan_upper=360 + 180,\n        tilt_lower=0,\n        tilt_upper=90,\n        dimmer_upper=255,\n    ):",
        "detail": "parrot.fixtures.chauvet.chauvet160",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.fixtures.chauvet.chauvet160",
        "description": "parrot.fixtures.chauvet.chauvet160",
        "peekOfCode": "dmx_layout = {\n    \"pan_coarse\": 0,\n    \"pan_fine\": 1,\n    \"tilt_coarse\": 2,\n    \"tilt_fine\": 3,\n    \"speed\": 4,\n    \"color_wheel\": 5,\n    \"gobo_wheel\": 6,\n    \"dimmer\": 7,\n    \"shutter\": 8,",
        "detail": "parrot.fixtures.chauvet.chauvet160",
        "documentation": {}
    },
    {
        "label": "color_wheel",
        "kind": 5,
        "importPath": "parrot.fixtures.chauvet.chauvet160",
        "description": "parrot.fixtures.chauvet.chauvet160",
        "peekOfCode": "color_wheel = [\n    ColorWheelEntry(Color(\"white\"), 0),\n    ColorWheelEntry(Color(\"red\"), 12),\n    ColorWheelEntry(Color(\"orange\"), 16),\n    ColorWheelEntry(Color(\"yellow\"), 22),\n    ColorWheelEntry(Color(\"green\"), 30),\n    ColorWheelEntry(Color(\"blue\"), 37),\n    ColorWheelEntry(Color(\"AntiqueWhite\"), 46),\n    ColorWheelEntry(Color(\"cyan\"), 52),\n    ColorWheelEntry(Color(\"magenta\"), 58),",
        "detail": "parrot.fixtures.chauvet.chauvet160",
        "documentation": {}
    },
    {
        "label": "gobo_wheel",
        "kind": 5,
        "importPath": "parrot.fixtures.chauvet.chauvet160",
        "description": "parrot.fixtures.chauvet.chauvet160",
        "peekOfCode": "gobo_wheel = [\n    GoboWheelEntry(\"open\", 0),\n]\nclass ChauvetSpot160_12Ch(ChauvetSpot_12Ch):\n    def __init__(\n        self,\n        patch,\n        pan_lower=360,\n        pan_upper=360 + 180,\n        tilt_lower=0,",
        "detail": "parrot.fixtures.chauvet.chauvet160",
        "documentation": {}
    },
    {
        "label": "TwoBeamLaser",
        "kind": 6,
        "importPath": "parrot.fixtures.oultia.laser",
        "description": "parrot.fixtures.oultia.laser",
        "peekOfCode": "class TwoBeamLaser(Laser):\n    def __init__(self, address):\n        super().__init__(address, \"oultia 2 beam laser\", 10)\n        self.set_pattern(14)\n        self.values[2] = 204\n        self.values[3] = 102\n        self.values[4] = 170\n        self.values[5] = 135\n    def set_mode(self, value):\n        # 0 - Manual",
        "detail": "parrot.fixtures.oultia.laser",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.fixtures.oultia.laser",
        "description": "parrot.fixtures.oultia.laser",
        "peekOfCode": "dmx_layout = [\n    \"mode\",\n    \"pattern\",\n    \"angle_control\",\n    \"horizontal_angle\",\n    \"vertical_angle\",\n    \"horizontal_position\",\n    \"vertical_position\",\n    \"size\",\n    \"color\",",
        "detail": "parrot.fixtures.oultia.laser",
        "documentation": {}
    },
    {
        "label": "FiveBeamLaser",
        "kind": 6,
        "importPath": "parrot.fixtures.uking.laser",
        "description": "parrot.fixtures.uking.laser",
        "peekOfCode": "class FiveBeamLaser(Laser):\n    def __init__(self, address):\n        super().__init__(address, \"uking 5 beam laser\", 13)\n        self.set_mode(0)\n        self.set_pan(0)\n        self.set_tilt(0)\n        self.set_pattern(50)\n        self.values[10] = 200\n    def set_mode(self, value):\n        # 0 - Manual",
        "detail": "parrot.fixtures.uking.laser",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.fixtures.uking.laser",
        "description": "parrot.fixtures.uking.laser",
        "peekOfCode": "dmx_layout = [\n    \"mode\",\n    \"dimmer1_green\",\n    \"dimmer2_yellow\",\n    \"dimmer3_blue\",\n    \"dimmer4_green\",\n    \"dimmer5_red\",\n    \"pattern\",\n    \"pan\",\n    \"tilt\",",
        "detail": "parrot.fixtures.uking.laser",
        "documentation": {}
    },
    {
        "label": "FixtureBase",
        "kind": 6,
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "peekOfCode": "class FixtureBase:\n    def __init__(self, address, name, width):\n        self.address = address\n        self.name = name\n        self.width = width\n        self.values = [0 for i in range(width)]\n        self.color_value = Color(\"black\")\n    def set_color(self, color: Color):\n        self.color_value = color\n    def get_color(self):",
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "ColorWheelEntry",
        "kind": 6,
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "peekOfCode": "class ColorWheelEntry:\n    def __init__(self, color: Color, dmx_value: int):\n        self.color = color\n        self.dmx_value = dmx_value\nclass GoboWheelEntry:\n    def __init__(self, gobo: str, dmx_value: int):\n        self.gobo = gobo\n        self.dmx_value = dmx_value",
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "GoboWheelEntry",
        "kind": 6,
        "importPath": "parrot.fixtures.base",
        "description": "parrot.fixtures.base",
        "peekOfCode": "class GoboWheelEntry:\n    def __init__(self, gobo: str, dmx_value: int):\n        self.gobo = gobo\n        self.dmx_value = dmx_value",
        "detail": "parrot.fixtures.base",
        "documentation": {}
    },
    {
        "label": "Laser",
        "kind": 6,
        "importPath": "parrot.fixtures.laser",
        "description": "parrot.fixtures.laser",
        "peekOfCode": "class Laser(FixtureBase):\n    pass",
        "detail": "parrot.fixtures.laser",
        "documentation": {}
    },
    {
        "label": "LedPar",
        "kind": 6,
        "importPath": "parrot.fixtures.led_par",
        "description": "parrot.fixtures.led_par",
        "peekOfCode": "class LedPar(FixtureBase):\n    def __init__(self, patch):\n        super().__init__(patch, \"led par\", 7)\n    def set_dimmer(self, value):\n        super().set_dimmer(value)\n        self.values[0] = value\n    def set_strobe(self, value):\n        self.values[4] = value\n    def set_color(self, color):\n        super().set_color(color)",
        "detail": "parrot.fixtures.led_par",
        "documentation": {}
    },
    {
        "label": "Motionstrip",
        "kind": 6,
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "peekOfCode": "class Motionstrip(FixtureBase):\n    def __init__(self, address, name, width):\n        super().__init__(address, name, width)\nclass Motionstrip38(Motionstrip):\n    def __init__(self, patch, pan_lower, pan_upper):\n        super().__init__(patch, \"motionstrip 38\", 38)\n        self.pan_lower = pan_lower\n        self.pan_upper = pan_upper\n        self.pan_range = pan_upper - pan_lower\n        self.set_pan_speed(128)",
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "Motionstrip38",
        "kind": 6,
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "peekOfCode": "class Motionstrip38(Motionstrip):\n    def __init__(self, patch, pan_lower, pan_upper):\n        super().__init__(patch, \"motionstrip 38\", 38)\n        self.pan_lower = pan_lower\n        self.pan_upper = pan_upper\n        self.pan_range = pan_upper - pan_lower\n        self.set_pan_speed(128)\n    def set_dimmer(self, value):\n        super().set_dimmer(value)\n        self.values[4] = value",
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "color_to_rgbw",
        "kind": 2,
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "peekOfCode": "def color_to_rgbw(color: Color):\n    if color.get_saturation() < 0.1:\n        return (0, 0, 0, color.luminance * 255)\n    else:\n        return (color.red * 255, color.green * 255, color.blue * 255, 0)\nclass Motionstrip(FixtureBase):\n    def __init__(self, address, name, width):\n        super().__init__(address, name, width)\nclass Motionstrip38(Motionstrip):\n    def __init__(self, patch, pan_lower, pan_upper):",
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "dmx_layout",
        "kind": 5,
        "importPath": "parrot.fixtures.motionstrip",
        "description": "parrot.fixtures.motionstrip",
        "peekOfCode": "dmx_layout = [\n    \"pan\",\n    \"pan_speed\",\n    [\"built_in_program\", 0],\n    \"built_in_program_speed\",\n    \"master_dimmer\",\n    \"strobe\" \"bulb 1: RGBW\",\n    \"bulb 2: RGBW\",\n    \"bulb 3: RGBW\",\n    \"bulb 4: RGBW\",",
        "detail": "parrot.fixtures.motionstrip",
        "documentation": {}
    },
    {
        "label": "MovingHead",
        "kind": 6,
        "importPath": "parrot.fixtures.moving_head",
        "description": "parrot.fixtures.moving_head",
        "peekOfCode": "class MovingHead(FixtureBase):\n    def __init__(self, address, name, width):\n        super().__init__(address, name, width)",
        "detail": "parrot.fixtures.moving_head",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "parrot.gui.gui",
        "description": "parrot.gui.gui",
        "peekOfCode": "class Window(Tk):\n    def __init__(self, state: State):\n        super().__init__()\n        self.state = state\n        self.title(\"Party Parrot\")\n        self.canvas = Canvas(self, width=800, height=300)\n        self.canvas.pack()\n        self.fixture_circles = []\n        for idx, fixture in enumerate(patch_bay):\n            self.fixture_circles.append(",
        "detail": "parrot.gui.gui",
        "documentation": {}
    },
    {
        "label": "CIRCLE_SIZE",
        "kind": 5,
        "importPath": "parrot.gui.gui",
        "description": "parrot.gui.gui",
        "peekOfCode": "CIRCLE_SIZE = 30\nCIRCLE_GAP = 20\nclass Window(Tk):\n    def __init__(self, state: State):\n        super().__init__()\n        self.state = state\n        self.title(\"Party Parrot\")\n        self.canvas = Canvas(self, width=800, height=300)\n        self.canvas.pack()\n        self.fixture_circles = []",
        "detail": "parrot.gui.gui",
        "documentation": {}
    },
    {
        "label": "CIRCLE_GAP",
        "kind": 5,
        "importPath": "parrot.gui.gui",
        "description": "parrot.gui.gui",
        "peekOfCode": "CIRCLE_GAP = 20\nclass Window(Tk):\n    def __init__(self, state: State):\n        super().__init__()\n        self.state = state\n        self.title(\"Party Parrot\")\n        self.canvas = Canvas(self, width=800, height=300)\n        self.canvas.pack()\n        self.fixture_circles = []\n        for idx, fixture in enumerate(patch_bay):",
        "detail": "parrot.gui.gui",
        "documentation": {}
    },
    {
        "label": "Plotter",
        "kind": 6,
        "importPath": "parrot.gui.plot",
        "description": "parrot.gui.plot",
        "peekOfCode": "class Plotter:\n    def __init__(self):\n        self.plot_counter = 0\n    def processBlockSpectrum(self, snd_block):\n        f, t, Sxx = signal.spectrogram(snd_block, RATE)\n        zmin = Sxx.min()\n        zmax = Sxx.max()\n        plt.clf()\n        plt.pcolormesh(t, f, Sxx, cmap=\"RdBu\", norm=LogNorm(vmin=zmin, vmax=zmax))\n        plt.ylabel(\"Frequency [Hz]\")",
        "detail": "parrot.gui.plot",
        "documentation": {}
    },
    {
        "label": "InterpreterBase",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class InterpreterBase(Generic[T]):\n    def __init__(self, subject: T):\n        self.subject = subject\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\nclass GroupInterpreterBase(Generic[T]):\n    def __init__(self, group: List[T]):\n        self.group = group\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "GroupInterpreterBase",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class GroupInterpreterBase(Generic[T]):\n    def __init__(self, group: List[T]):\n        self.group = group\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\nclass Dimmer100(InterpreterBase):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n    def step(self, frame, scheme):\n        self.subject.set_dimmer(100)",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Dimmer100",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class Dimmer100(InterpreterBase):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n    def step(self, frame, scheme):\n        self.subject.set_dimmer(100)\nclass Dimmer30(InterpreterBase):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n    def step(self, frame, scheme):\n        self.subject.set_dimmer(30)",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Dimmer30",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class Dimmer30(InterpreterBase):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n    def step(self, frame, scheme):\n        self.subject.set_dimmer(30)\nclass ColorFg(InterpreterBase):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n    def step(self, frame, scheme):\n        self.subject.set_color(scheme.fg)",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "ColorFg",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class ColorFg(InterpreterBase):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n    def step(self, frame, scheme):\n        self.subject.set_color(scheme.fg)\nclass MoveCircles(InterpreterBase):\n    def __init__(self, subject: FixtureBase, multiplier=1):\n        super().__init__(subject)\n        self.multiplier = multiplier\n    def step(self, frame, scheme):",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "MoveCircles",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class MoveCircles(InterpreterBase):\n    def __init__(self, subject: FixtureBase, multiplier=1):\n        super().__init__(subject)\n        self.multiplier = multiplier\n    def step(self, frame, scheme):\n        self.subject.set_pan(math.cos(frame.time * self.multiplier) * 127 + 128)\n        self.subject.set_tilt(math.sin(frame.time * self.multiplier) * 127 + 128)\nclass FlashBeat(InterpreterBase[FixtureBase]):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "FlashBeat",
        "kind": 6,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "class FlashBeat(InterpreterBase[FixtureBase]):\n    def __init__(self, subject: FixtureBase):\n        super().__init__(subject)\n        self.signal = \"drums\"\n    def step(self, frame, scheme):\n        if frame[\"sustained\"] > 0.7:\n            self.subject.set_dimmer(100)\n            self.subject.set_strobe(200)\n        elif frame[self.signal] > 0.4:\n            self.subject.set_dimmer(frame[self.signal] * 255)",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Phrase",
        "kind": 5,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "Phrase = Enum(\"Phrase\", [\"intro_outro\", \"build\", \"drop\", \"breakdown\"])\nT = TypeVar(\"T\", bound=FixtureBase)\nclass InterpreterBase(Generic[T]):\n    def __init__(self, subject: T):\n        self.subject = subject\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\nclass GroupInterpreterBase(Generic[T]):\n    def __init__(self, group: List[T]):\n        self.group = group",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "parrot.interpreters.base",
        "description": "parrot.interpreters.base",
        "peekOfCode": "T = TypeVar(\"T\", bound=FixtureBase)\nclass InterpreterBase(Generic[T]):\n    def __init__(self, subject: T):\n        self.subject = subject\n    def step(self, frame: Frame, scheme: ColorScheme):\n        pass\nclass GroupInterpreterBase(Generic[T]):\n    def __init__(self, group: List[T]):\n        self.group = group\n    def step(self, frame: Frame, scheme: ColorScheme):",
        "detail": "parrot.interpreters.base",
        "documentation": {}
    },
    {
        "label": "Combo",
        "kind": 6,
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "peekOfCode": "class Combo(InterpreterBase[T]):\n    def __init__(self, subject: T, interpreters: List[InterpreterBase[T]]):\n        super().__init__(subject)\n        self.interpreters = [i(subject) for i in interpreters]\n    def step(self, frame: Frame, scheme: ColorScheme):\n        for i in self.interpreters:\n            i.step(frame, scheme)\ndef comboify(interpreters: List[InterpreterBase[T]]) -> Combo[T]:\n    return lambda subject: Combo(subject, interpreters)\nclass GroupCombo(GroupInterpreterBase[T]):",
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "GroupCombo",
        "kind": 6,
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "peekOfCode": "class GroupCombo(GroupInterpreterBase[T]):\n    def __init__(\n        self,\n        group: List[T],\n        interpreters: List[Union[InterpreterBase, GroupInterpreterBase[T]]],\n    ):\n        super().__init__(group)\n        self.interpreters = [ensure_groupify(i)(group) for i in interpreters]\n    def step(self, frame: Frame, scheme: ColorScheme):\n        for i in self.interpreters:",
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "comboify",
        "kind": 2,
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "peekOfCode": "def comboify(interpreters: List[InterpreterBase[T]]) -> Combo[T]:\n    return lambda subject: Combo(subject, interpreters)\nclass GroupCombo(GroupInterpreterBase[T]):\n    def __init__(\n        self,\n        group: List[T],\n        interpreters: List[Union[InterpreterBase, GroupInterpreterBase[T]]],\n    ):\n        super().__init__(group)\n        self.interpreters = [ensure_groupify(i)(group) for i in interpreters]",
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "group_comboify",
        "kind": 2,
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "peekOfCode": "def group_comboify(\n    interpreters: List[Union[InterpreterBase, GroupInterpreterBase[T]]]\n) -> GroupCombo[T]:\n    return lambda group: GroupCombo(group, interpreters)",
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "parrot.interpreters.combo",
        "description": "parrot.interpreters.combo",
        "peekOfCode": "T = TypeVar(\"T\", bound=FixtureBase)\nclass Combo(InterpreterBase[T]):\n    def __init__(self, subject: T, interpreters: List[InterpreterBase[T]]):\n        super().__init__(subject)\n        self.interpreters = [i(subject) for i in interpreters]\n    def step(self, frame: Frame, scheme: ColorScheme):\n        for i in self.interpreters:\n            i.step(frame, scheme)\ndef comboify(interpreters: List[InterpreterBase[T]]) -> Combo[T]:\n    return lambda subject: Combo(subject, interpreters)",
        "detail": "parrot.interpreters.combo",
        "documentation": {}
    },
    {
        "label": "InterpreterGroupify",
        "kind": 6,
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "peekOfCode": "class InterpreterGroupify(GroupInterpreterBase[T]):\n    def __init__(self, group: List[T], interpreter_cls: type[InterpreterBase[T]]):\n        super().__init__(group)\n        self.interpreters = [interpreter_cls(subject) for subject in group]\n    def step(self, frame, scheme):\n        for i in self.interpreters:\n            i.step(frame, scheme)\ndef groupify(interpreter_cls: type[InterpreterBase[T]]) -> InterpreterGroupify[T]:\n    return lambda group: InterpreterGroupify(group, interpreter_cls)\ndef ensure_groupify(",
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "FixtureGroup",
        "kind": 6,
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "peekOfCode": "class FixtureGroup(Generic[T]):\n    def __init__(self):\n        pass\nclass SequenceDimmers(GroupInterpreterBase[T]):\n    def __init__(self, group: List[T], dimmer=255, wait_time=1):\n        super().__init__(group)\n        self.dimmer = dimmer\n        self.wait_time = wait_time\n    def step(self, frame, scheme):\n        for i, fixture in enumerate(self.group):",
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "SequenceDimmers",
        "kind": 6,
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "peekOfCode": "class SequenceDimmers(GroupInterpreterBase[T]):\n    def __init__(self, group: List[T], dimmer=255, wait_time=1):\n        super().__init__(group)\n        self.dimmer = dimmer\n        self.wait_time = wait_time\n    def step(self, frame, scheme):\n        for i, fixture in enumerate(self.group):\n            fixture.set_dimmer(self.dimmer if frame.time / self.wait_time == i else 0)",
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "groupify",
        "kind": 2,
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "peekOfCode": "def groupify(interpreter_cls: type[InterpreterBase[T]]) -> InterpreterGroupify[T]:\n    return lambda group: InterpreterGroupify(group, interpreter_cls)\ndef ensure_groupify(\n    interpreter_cls: type[Union[InterpreterBase[T], GroupInterpreterBase[T]]]\n) -> GroupInterpreterBase[T]:\n    if isinstance(interpreter_cls, InterpreterBase):\n        return groupify(interpreter_cls)\n    else:\n        return interpreter_cls\n# Type annotation for intepreter map",
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "ensure_groupify",
        "kind": 2,
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "peekOfCode": "def ensure_groupify(\n    interpreter_cls: type[Union[InterpreterBase[T], GroupInterpreterBase[T]]]\n) -> GroupInterpreterBase[T]:\n    if isinstance(interpreter_cls, InterpreterBase):\n        return groupify(interpreter_cls)\n    else:\n        return interpreter_cls\n# Type annotation for intepreter map\nclass FixtureGroup(Generic[T]):\n    def __init__(self):",
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "T",
        "kind": 5,
        "importPath": "parrot.interpreters.group",
        "description": "parrot.interpreters.group",
        "peekOfCode": "T = TypeVar(\"T\", bound=FixtureBase)\nclass InterpreterGroupify(GroupInterpreterBase[T]):\n    def __init__(self, group: List[T], interpreter_cls: type[InterpreterBase[T]]):\n        super().__init__(group)\n        self.interpreters = [interpreter_cls(subject) for subject in group]\n    def step(self, frame, scheme):\n        for i in self.interpreters:\n            i.step(frame, scheme)\ndef groupify(interpreter_cls: type[InterpreterBase[T]]) -> InterpreterGroupify[T]:\n    return lambda group: InterpreterGroupify(group, interpreter_cls)",
        "detail": "parrot.interpreters.group",
        "documentation": {}
    },
    {
        "label": "DimmerBinaryLatched",
        "kind": 6,
        "importPath": "parrot.interpreters.latched",
        "description": "parrot.interpreters.latched",
        "peekOfCode": "class DimmerBinaryLatched(InterpreterBase[FixtureBase]):\n    def __init__(self, subject: FixtureBase, signal=\"sustained\"):\n        super().__init__(subject)\n        self.signal = signal\n        self.switch = False\n        self.latch_until = 0\n    def step(self, frame, scheme):\n        if frame[\"sustained\"] > 0.55:\n            self.switch = True\n            self.latch_until = frame.time + 0.5",
        "detail": "parrot.interpreters.latched",
        "documentation": {}
    },
    {
        "label": "DimmerFadeLatched",
        "kind": 6,
        "importPath": "parrot.interpreters.latched",
        "description": "parrot.interpreters.latched",
        "peekOfCode": "class DimmerFadeLatched(InterpreterBase[FixtureBase]):\n    def __init__(self, subject: FixtureBase, signal=\"sustained\"):\n        super().__init__(subject)\n        self.signal = signal\n        self.switch = False\n        self.latch_until = 0\n        self.memory = 0\n    def step(self, frame, scheme):\n        if frame[self.signal] > 0.55:\n            self.switch = True",
        "detail": "parrot.interpreters.latched",
        "documentation": {}
    },
    {
        "label": "MotionstripBulbBeat",
        "kind": 6,
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "peekOfCode": "class MotionstripBulbBeat(GroupInterpreterBase[Motionstrip38]):\n    def __init__(self, group: List[Motionstrip38]):\n        super().__init__(group)\n        self.signal = \"drums\"\n        self.total_bulbs = len(group) * 8\n        self.bulb = 0\n        self.on = False\n    def step(self, frame, scheme):\n        if frame[self.signal] > 0.4:\n            if self.on == False:",
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionstripWaveform",
        "kind": 6,
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "peekOfCode": "class MotionstripWaveform(InterpreterBase[Motionstrip38]):\n    def __init__(self, subject: Motionstrip38):\n        super().__init__(subject)\n        self.signal = \"vocals\"\n    def step(self, frame, scheme):\n        color = scheme.fg\n        parts = 4\n        self.subject.set_dimmer(255)\n        self.subject.set_pan(math.cos(frame.time) * 127 + 128)\n        for i in range(parts):",
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionstripSlowRespond",
        "kind": 6,
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "peekOfCode": "class MotionstripSlowRespond(InterpreterBase[Motionstrip38]):\n    def __init__(self, subject: Motionstrip38):\n        super().__init__(subject)\n        self.signal = \"sustained\"\n        self.dimmer_memory = 0\n        self.decay_rate = 0.24\n        self.latch_until = 0\n    def step(self, frame, scheme):\n        pan = math.cos(frame.time) * 127 + 128\n        self.subject.set_pan(pan)",
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MotionStripBulbBeatAndWiggle",
        "kind": 5,
        "importPath": "parrot.interpreters.motionstrip",
        "description": "parrot.interpreters.motionstrip",
        "peekOfCode": "MotionStripBulbBeatAndWiggle = lambda group: GroupCombo(\n    group, [MotionstripBulbBeat, groupify(MoveCircles)]\n)\nclass MotionstripWaveform(InterpreterBase[Motionstrip38]):\n    def __init__(self, subject: Motionstrip38):\n        super().__init__(subject)\n        self.signal = \"vocals\"\n    def step(self, frame, scheme):\n        color = scheme.fg\n        parts = 4",
        "detail": "parrot.interpreters.motionstrip",
        "documentation": {}
    },
    {
        "label": "MoverFan",
        "kind": 6,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "class MoverFan(GroupInterpreterBase[MovingHead]):\n    def __init__(self, group):\n        super().__init__(group)\n        for i, fixture in enumerate(group):\n            fixture.set_pan(i * 255 / len(group))\n            fixture.set_tilt(128)\n    def step(self, frame, scheme):\n        pass\nMoverBeatAndCircle = comboify([FlashBeat, MoveCircles, ColorFg])\nMoverGroupBeatInFan = group_comboify([FlashBeat, MoverFan, ColorFg])",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverBeatAndCircle",
        "kind": 5,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "MoverBeatAndCircle = comboify([FlashBeat, MoveCircles, ColorFg])\nMoverGroupBeatInFan = group_comboify([FlashBeat, MoverFan, ColorFg])\nMoverSequenceAndCircle = group_comboify([MoveCircles, ColorFg, SequenceDimmers])\nMoverSequenceInFan = group_comboify([SequenceDimmers, MoverFan, ColorFg])\nMoverDimAndCircle = group_comboify([MoveCircles, ColorFg, Dimmer30])",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverGroupBeatInFan",
        "kind": 5,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "MoverGroupBeatInFan = group_comboify([FlashBeat, MoverFan, ColorFg])\nMoverSequenceAndCircle = group_comboify([MoveCircles, ColorFg, SequenceDimmers])\nMoverSequenceInFan = group_comboify([SequenceDimmers, MoverFan, ColorFg])\nMoverDimAndCircle = group_comboify([MoveCircles, ColorFg, Dimmer30])",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverSequenceAndCircle",
        "kind": 5,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "MoverSequenceAndCircle = group_comboify([MoveCircles, ColorFg, SequenceDimmers])\nMoverSequenceInFan = group_comboify([SequenceDimmers, MoverFan, ColorFg])\nMoverDimAndCircle = group_comboify([MoveCircles, ColorFg, Dimmer30])",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverSequenceInFan",
        "kind": 5,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "MoverSequenceInFan = group_comboify([SequenceDimmers, MoverFan, ColorFg])\nMoverDimAndCircle = group_comboify([MoveCircles, ColorFg, Dimmer30])",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "MoverDimAndCircle",
        "kind": 5,
        "importPath": "parrot.interpreters.movers",
        "description": "parrot.interpreters.movers",
        "peekOfCode": "MoverDimAndCircle = group_comboify([MoveCircles, ColorFg, Dimmer30])",
        "detail": "parrot.interpreters.movers",
        "documentation": {}
    },
    {
        "label": "Noop",
        "kind": 6,
        "importPath": "parrot.interpreters.noop",
        "description": "parrot.interpreters.noop",
        "peekOfCode": "class Noop(InterpreterBase[FixtureBase]):\n    def __init__(self, fixture):\n        self.fixture = fixture\n    def step(self, frame, scheme):\n        pass",
        "detail": "parrot.interpreters.noop",
        "documentation": {}
    },
    {
        "label": "GroupSlowRespond",
        "kind": 6,
        "importPath": "parrot.interpreters.slow",
        "description": "parrot.interpreters.slow",
        "peekOfCode": "class GroupSlowRespond(GroupInterpreterBase[FixtureBase]):\n    def __init__(self, group):\n        super().__init__(group)\n        self.dimmer_memory = 0\n        self.signal = \"sustained\"\n    def step(self, frame: Frame, scheme: ColorScheme):\n        self.dimmer_memory = lerp(self.dimmer_memory, frame.all, 0.24)\n        for idx, fixture in enumerate(self.group):\n            if idx % 2 == 0:\n                fixture.set_color(scheme.bg)",
        "detail": "parrot.interpreters.slow",
        "documentation": {}
    },
    {
        "label": "GroupSlowDecay",
        "kind": 6,
        "importPath": "parrot.interpreters.slow",
        "description": "parrot.interpreters.slow",
        "peekOfCode": "class GroupSlowDecay(GroupInterpreterBase[FixtureBase]):\n    def __init__(self, group):\n        super().__init__(group)\n        self.dimmer_memory = 0\n    def step(self, frame: Frame, scheme: ColorScheme):\n        self.dimmer_memory = max(lerp(self.dimmer_memory, 0, 0.1), frame.all)\n        for idx, fixture in enumerate(self.group):\n            if idx % 2 == 0:\n                fixture.set_color(scheme.bg)\n            else:",
        "detail": "parrot.interpreters.slow",
        "documentation": {}
    },
    {
        "label": "Demucs",
        "kind": 6,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "class Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() \n        self.snd_blocks = []",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "bundle",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "bundle = HDEMUCS_HIGH_MUSDB_PLUS\nmodel = bundle.get_model()\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "model",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "model = bundle.get_model()\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "device",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "device = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\nmodel.to(device)\nsample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "sample_rate",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "sample_rate = bundle.sample_rate\nsources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "sources_list",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "sources_list = model.sources\nTHRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "THRESHOLD = 0 # dB\nRATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "RATE = sample_rate\nINPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "INPUT_BLOCK_TIME = 1 * 0.0001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "ACCEPTED_LATENCY",
        "kind": 5,
        "importPath": "parrot.listeners.demucs",
        "description": "parrot.listeners.demucs",
        "peekOfCode": "ACCEPTED_LATENCY = 0.001 * 60 # 60 ms\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass Demucs(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD",
        "detail": "parrot.listeners.demucs",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef init_open_dmx(device):",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "int_clamp_list",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef init_open_dmx(device):\n    device.reset()\n    device.set_baudrate(3000000/12)\n    device.set_line_property(8, 2, \"N\")\n    device.set_flowctrl(\"\")\n    device.set_rts(False)\n    device.purge_rx_buffer()\n    device.purge_tx_buffer()",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "init_open_dmx",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def init_open_dmx(device):\n    device.reset()\n    device.set_baudrate(3000000/12)\n    device.set_line_property(8, 2, \"N\")\n    device.set_flowctrl(\"\")\n    device.set_rts(False)\n    device.purge_rx_buffer()\n    device.purge_tx_buffer()\ndef set_par(buffer, patch, r, g, b):\n    buffer[patch:patch+7] = int_clamp_list([",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "set_par",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def set_par(buffer, patch, r, g, b):\n    buffer[patch:patch+7] = int_clamp_list([\n        255, \n        r, \n        g, \n        b, \n        0, \n        0, \n        0\n    ])",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "set_mover",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def set_mover(buffer, patch, pan, tilt, speed=0, color=0, gobo=0, dimmer=255, shutter=6, function=0, macro=0):\n    pan_ts = pan/540*255\n    tilt_ts = tilt/270*255\n    buffer[patch:patch+11] = int_clamp_list([\n        pan_ts,\n        (pan_ts - round(pan_ts)) * 255,\n        tilt_ts,\n        (tilt_ts - round(tilt_ts)) * 255,\n        speed,\n        color,",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-cheap",
        "description": "parrot.listeners.dmx-entec-cheap",
        "peekOfCode": "def main():\n    device_url = \"ftdi://ftdi:232:A10NI4B7/1\"\n    device = Ftdi.create_from_url(device_url)\n    init_open_dmx(device)\n    buffer = [int(0)]*512\n    frame = 0\n    fta = 1/16\n    while(True):\n        init_open_dmx(device)\n        set_par(buffer, 1,  clamp(128*math.sin(frame*fta)+128, 1, 255), clamp(128*math.cos(frame*fta)+128, 1, 255), 0)",
        "detail": "parrot.listeners.dmx-entec-cheap",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "def clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef set_par(patch, r, g, b):",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "int_clamp_list",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "def int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\ndef set_par(patch, r, g, b):\n    values = int_clamp_list([\n        255, \n        r, \n        g, \n        b, \n        0, \n        0, ",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "set_par",
        "kind": 2,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "def set_par(patch, r, g, b):\n    values = int_clamp_list([\n        255, \n        r, \n        g, \n        b, \n        0, \n        0, \n        0\n    ])",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "usb_path",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "usb_path = \"/dev/cu.usbserial-EN419206\"\nimport math\nfrom time import sleep\nfrom DMXEnttecPro import Controller\ndmx = Controller(usb_path)  # Typical of Linux\npar_patch = 19\ndef clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "dmx",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "dmx = Controller(usb_path)  # Typical of Linux\npar_patch = 19\ndef clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "par_patch",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "par_patch = 19\ndef clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef int_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "frame",
        "kind": 5,
        "importPath": "parrot.listeners.dmx-entec-pro",
        "description": "parrot.listeners.dmx-entec-pro",
        "peekOfCode": "frame = 0\nwhile(True):\n    set_par(par_patch, math.sin(frame) * 128 + 128, 0, math.cos(frame) * 128 + 128)\n    sleep(0.1)\n    frame += 0.1",
        "detail": "parrot.listeners.dmx-entec-pro",
        "documentation": {}
    },
    {
        "label": "AudioHandler",
        "kind": 6,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "class AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() \n        self.snd_blocks = []\n        self.spectrogram_blocks = []",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() ",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "THRESHOLD = 0 # dB\nRATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "RATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "INPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic",
        "description": "parrot.listeners.mic",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0",
        "detail": "parrot.listeners.mic",
        "documentation": {}
    },
    {
        "label": "MicToDmxBasic",
        "kind": 6,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "class MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.power_max = 0\n        self.power_min = 99999999999999999\n        self.spectrogram_buffer = None\n        self.lookback_buffer_size = 10000\n        self.sustain_buffer = []",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.power_max = 0\n        self.power_min = 99999999999999999\n        self.spectrogram_buffer = None",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "THRESHOLD = 0  # dB\nRATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001  # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "RATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001  # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "INPUT_BLOCK_TIME = 30 * 0.001  # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nSHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "SHOW_PLOT",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "SHOW_PLOT = os.environ.get(\"SHOW_PLOT\", False)\nSHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "SHOW_GUI",
        "kind": 5,
        "importPath": "parrot.listeners.mic_to_dmx_basic",
        "description": "parrot.listeners.mic_to_dmx_basic",
        "peekOfCode": "SHOW_GUI = os.environ.get(\"SHOW_GUI\", True)\nif SHOW_PLOT:\n    matplotlib.use(\"macosx\")\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass MicToDmxBasic(object):\n    def __init__(self):\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD",
        "detail": "parrot.listeners.mic_to_dmx_basic",
        "documentation": {}
    },
    {
        "label": "AudioHandler",
        "kind": 6,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "class AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()\n        self.ax2 = self.ax1.twinx() \n        self.snd_blocks = []",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "get_rms",
        "kind": 2,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "def get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0\n        self.fig, self.ax1 = plt.subplots()",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "THRESHOLD",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "THRESHOLD = 0 # dB\nRATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "RATE",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "RATE = 44100\nINPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "INPUT_BLOCK_TIME",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "INPUT_BLOCK_TIME = 30 * 0.001 # 30 ms\nINPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK = int(RATE * INPUT_BLOCK_TIME)\nINPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "INPUT_FRAMES_PER_BLOCK_BUFFER",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "INPUT_FRAMES_PER_BLOCK_BUFFER = int(RATE * INPUT_BLOCK_TIME)\nTIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "TIME_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "TIME_IN_GRAPH = 1000\nBLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "BLOCKS_IN_GRAPH",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "BLOCKS_IN_GRAPH = int(TIME_IN_GRAPH / INPUT_BLOCK_TIME)\nmatplotlib.use('macosx')\nfrom spleeter.separator import Separator\n# Using embedded configuration.\nseparator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "separator",
        "kind": 5,
        "importPath": "parrot.listeners.spleeter",
        "description": "parrot.listeners.spleeter",
        "peekOfCode": "separator = Separator('spleeter:2stems')\ndef get_rms(block):\n    return np.sqrt(np.mean(np.square(block)))\nclass AudioHandler(object):\n    def __init__(self):\n        self.start_time = time.time()\n        self.pa = pyaudio.PyAudio()\n        self.stream = self.open_mic_stream()\n        self.threshold = THRESHOLD\n        self.plot_counter = 0",
        "detail": "parrot.listeners.spleeter",
        "documentation": {}
    },
    {
        "label": "lerp_color",
        "kind": 2,
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "peekOfCode": "def lerp_color(a: Color, b: Color, t: float) -> Color:\n    return Color(\n        rgb=(lerp(a.red, b.red, t), lerp(a.green, b.green, t), lerp(a.blue, b.blue, t))\n    )\ndef color_distance(a: Color, b: Color) -> float:\n    # Hue distance plus saturation distance plus value distance\n    return (\n        abs(a.hue - b.hue)\n        + abs(a.saturation - b.saturation)\n        + abs(a.luminance - b.luminance)",
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "color_distance",
        "kind": 2,
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "peekOfCode": "def color_distance(a: Color, b: Color) -> float:\n    # Hue distance plus saturation distance plus value distance\n    return (\n        abs(a.hue - b.hue)\n        + abs(a.saturation - b.saturation)\n        + abs(a.luminance - b.luminance)\n    )\ndef dim_color(color: Color, dimmer: float) -> Color:\n    return Color(rgb=(color.red * dimmer, color.green * dimmer, color.blue * dimmer))",
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "dim_color",
        "kind": 2,
        "importPath": "parrot.utils.color_extra",
        "description": "parrot.utils.color_extra",
        "peekOfCode": "def dim_color(color: Color, dimmer: float) -> Color:\n    return Color(rgb=(color.red * dimmer, color.green * dimmer, color.blue * dimmer))",
        "detail": "parrot.utils.color_extra",
        "documentation": {}
    },
    {
        "label": "C_HSL",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:\n            return rgb2hsl(tuple(v / 255. for v in COLOR_NAME_TO_RGB[label]))\n        raise AttributeError(\"%s instance has no attribute %r\"\n                             % (self.__class__, value))\nHSL = C_HSL()\nclass C_RGB:\n    \"\"\"RGB colors container",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "C_RGB",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class C_RGB:\n    \"\"\"RGB colors container\n    Provides a quick color access.\n    >>> from colour import RGB\n    >>> RGB.WHITE\n    (1.0, 1.0, 1.0)\n    >>> RGB.BLUE\n    (0.0, 0.0, 1.0)\n    >>> RGB.DONOTEXISTS  # doctest: +ELLIPSIS\n    Traceback (most recent call last):",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "C_HEX",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class C_HEX:\n    \"\"\"RGB colors container\n    Provides a quick color access.\n    >>> from colour import HEX\n    >>> HEX.WHITE\n    '#fff'\n    >>> HEX.BLUE\n    '#00f'\n    >>> HEX.DONOTEXISTS  # doctest: +ELLIPSIS\n    Traceback (most recent call last):",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 6,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "class Color(object):\n    \"\"\"Abstraction of a color object\n    Color object keeps information of a color. It can input/output to different\n    format (HSL, RGB, HEX, WEB) and their partial representation.\n        >>> from colour import Color, HSL\n        >>> b = Color()\n        >>> b.hsl = HSL.BLUE\n    Access values\n    -------------\n        >>> b.hue  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hsl2rgb",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hsl2rgb(hsl):\n    \"\"\"Convert HSL representation towards RGB\n    :param h: Hue, position around the chromatic circle (h=1 equiv h=0)\n    :param s: Saturation, color saturation (0=full gray, 1=full color)\n    :param l: Ligthness, Overhaul lightness (0=full black, 1=full white)\n    :rtype: 3-uple for RGB values in float between 0 and 1\n    Hue, Saturation, Range from Lightness is a float between 0 and 1\n    Note that Hue can be set to any value but as it is a rotation\n    around the chromatic circle, any value above 1 or below 0 can\n    be expressed by a value between 0 and 1 (Note that h=0 is equiv",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "rgb2hsl",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def rgb2hsl(rgb):\n    \"\"\"Convert RGB representation towards HSL\n    :param r: Red amount (float between 0 and 1)\n    :param g: Green amount (float between 0 and 1)\n    :param b: Blue amount (float between 0 and 1)\n    :rtype: 3-uple for HSL values in float between 0 and 1\n    This algorithm came from:\n    http://www.easyrgb.com/index.php?X=MATH&H=19#text19\n    Here are some quick notion of RGB to HSL conversion:\n    >>> from colour import rgb2hsl",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "rgb2hex",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def rgb2hex(rgb, force_long=False):\n    \"\"\"Transform RGB tuple to hex RGB representation\n    :param rgb: RGB 3-uple of float between 0 and 1\n    :rtype: 3 hex char or 6 hex char string representation\n    Usage\n    -----\n    >>> from colour import rgb2hex\n    >>> rgb2hex((0.0,1.0,0.0))\n    '#0f0'\n    Rounding try to be as natural as possible:",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hex2rgb",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hex2rgb(str_rgb):\n    \"\"\"Transform hex RGB representation to RGB tuple\n    :param str_rgb: 3 hex char or 6 hex char string representation\n    :rtype: RGB 3-uple of float between 0 and 1\n    >>> from colour import hex2rgb\n    >>> hex2rgb('#00ff00')\n    (0.0, 1.0, 0.0)\n    >>> hex2rgb('#0f0')\n    (0.0, 1.0, 0.0)\n    >>> hex2rgb('#aaa')  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hex2web",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hex2web(hex):\n    \"\"\"Converts HEX representation to WEB\n    :param rgb: 3 hex char or 6 hex char string representation\n    :rtype: web string representation (human readable if possible)\n    WEB representation uses X11 rgb.txt to define conversion\n    between RGB and english color names.\n    Usage\n    =====\n    >>> from colour import hex2web\n    >>> hex2web('#ff0000')",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "web2hex",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def web2hex(web, force_long=False):\n    \"\"\"Converts WEB representation to HEX\n    :param rgb: web string representation (human readable if possible)\n    :rtype: 3 hex char or 6 hex char string representation\n    WEB representation uses X11 rgb.txt to define conversion\n    between RGB and english color names.\n    Usage\n    =====\n    >>> from colour import web2hex\n    >>> web2hex('red')",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "color_scale",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))\n    ...  for hsl in color_scale((0, 0, 0),\n    ...                         (0, 0, 1),\n    ...                         15)]  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB_color_picker",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def RGB_color_picker(obj):\n    \"\"\"Build a color representation from the string representation of an object\n    This allows to quickly get a color from some data, with the\n    additional benefit that the color will be the same as long as the\n    (string representation of the) data is the same::\n        >>> from colour import RGB_color_picker, Color\n    Same inputs produce the same result::\n        >>> RGB_color_picker(\"Something\") == RGB_color_picker(\"Something\")\n        True\n    ... but different inputs produce different colors::",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hash_or_str",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def hash_or_str(obj):\n    try:\n        return hash((type(obj).__name__, obj))\n    except TypeError:\n        ## Adds the type name to make sure two object of different type but\n        ## identical string representation get distinguished.\n        return type(obj).__name__ + str(obj)\n##\n## All purpose object\n##",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "make_color_factory",
        "kind": 2,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "def make_color_factory(**kwargs_defaults):\n    def ColorFactory(*args, **kwargs):\n        new_kwargs = kwargs_defaults.copy()\n        new_kwargs.update(kwargs)\n        return Color(*args, **new_kwargs)\n    return ColorFactory",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "FLOAT_ERROR",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "FLOAT_ERROR = 0.0000005\nRGB_TO_COLOR_NAMES = {\n    (0, 0, 0): ['Black'],\n    (0, 0, 128): ['Navy', 'NavyBlue'],\n    (0, 0, 139): ['DarkBlue'],\n    (0, 0, 205): ['MediumBlue'],\n    (0, 0, 255): ['Blue'],\n    (0, 100, 0): ['DarkGreen'],\n    (0, 128, 0): ['Green'],\n    (0, 139, 139): ['DarkCyan'],",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB_TO_COLOR_NAMES",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "RGB_TO_COLOR_NAMES = {\n    (0, 0, 0): ['Black'],\n    (0, 0, 128): ['Navy', 'NavyBlue'],\n    (0, 0, 139): ['DarkBlue'],\n    (0, 0, 205): ['MediumBlue'],\n    (0, 0, 255): ['Blue'],\n    (0, 100, 0): ['DarkGreen'],\n    (0, 128, 0): ['Green'],\n    (0, 139, 139): ['DarkCyan'],\n    (0, 191, 255): ['DeepSkyBlue'],",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "COLOR_NAME_TO_RGB",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "COLOR_NAME_TO_RGB = dict(\n    (name.lower(), rgb)\n    for rgb, names in RGB_TO_COLOR_NAMES.items()\n    for name in names)\nLONG_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{6}$')\nSHORT_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{3}$')\nclass C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "LONG_HEX_COLOR",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "LONG_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{6}$')\nSHORT_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{3}$')\nclass C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:\n            return rgb2hsl(tuple(v / 255. for v in COLOR_NAME_TO_RGB[label]))\n        raise AttributeError(\"%s instance has no attribute %r\"\n                             % (self.__class__, value))\nHSL = C_HSL()",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "SHORT_HEX_COLOR",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "SHORT_HEX_COLOR = re.compile(r'^#[0-9a-fA-F]{3}$')\nclass C_HSL:\n    def __getattr__(self, value):\n        label = value.lower()\n        if label in COLOR_NAME_TO_RGB:\n            return rgb2hsl(tuple(v / 255. for v in COLOR_NAME_TO_RGB[label]))\n        raise AttributeError(\"%s instance has no attribute %r\"\n                             % (self.__class__, value))\nHSL = C_HSL()\nclass C_RGB:",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "HSL",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "HSL = C_HSL()\nclass C_RGB:\n    \"\"\"RGB colors container\n    Provides a quick color access.\n    >>> from colour import RGB\n    >>> RGB.WHITE\n    (1.0, 1.0, 1.0)\n    >>> RGB.BLUE\n    (0.0, 0.0, 1.0)\n    >>> RGB.DONOTEXISTS  # doctest: +ELLIPSIS",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "RGB = C_RGB()\nHEX = C_HEX()\n##\n## Conversion function\n##\ndef hsl2rgb(hsl):\n    \"\"\"Convert HSL representation towards RGB\n    :param h: Hue, position around the chromatic circle (h=1 equiv h=0)\n    :param s: Saturation, color saturation (0=full gray, 1=full color)\n    :param l: Ligthness, Overhaul lightness (0=full black, 1=full white)",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "HEX",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "HEX = C_HEX()\n##\n## Conversion function\n##\ndef hsl2rgb(hsl):\n    \"\"\"Convert HSL representation towards RGB\n    :param h: Hue, position around the chromatic circle (h=1 equiv h=0)\n    :param s: Saturation, color saturation (0=full gray, 1=full color)\n    :param l: Ligthness, Overhaul lightness (0=full black, 1=full white)\n    :rtype: 3-uple for RGB values in float between 0 and 1",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hsl2hex",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "hsl2hex = lambda x: rgb2hex(hsl2rgb(x))\nhex2hsl = lambda x: rgb2hsl(hex2rgb(x))\nrgb2web = lambda x: hex2web(rgb2hex(x))\nweb2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hex2hsl",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "hex2hsl = lambda x: rgb2hsl(hex2rgb(x))\nrgb2web = lambda x: hex2web(rgb2hex(x))\nweb2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "rgb2web",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "rgb2web = lambda x: hex2web(rgb2hex(x))\nweb2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "web2rgb",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "web2rgb = lambda x: hex2rgb(web2hex(x))\nweb2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "web2hsl",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "web2hsl = lambda x: rgb2hsl(web2rgb(x))\nhsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))\n    ...  for hsl in color_scale((0, 0, 0),",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "hsl2web",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "hsl2web = lambda x: rgb2web(hsl2rgb(x))\ndef color_scale(begin_hsl, end_hsl, nb):\n    \"\"\"Returns a list of nb color HSL tuples between begin_hsl and end_hsl\n    >>> from colour import color_scale\n    >>> [rgb2hex(hsl2rgb(hsl)) for hsl in color_scale((0, 1, 0.5),\n    ...                                               (1, 1, 0.5), 3)]\n    ['#f00', '#0f0', '#00f', '#f00']\n    >>> [rgb2hex(hsl2rgb(hsl))\n    ...  for hsl in color_scale((0, 0, 0),\n    ...                         (0, 0, 1),",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "RGB_equivalence",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "RGB_equivalence = lambda c1, c2: c1.hex_l == c2.hex_l\nHSL_equivalence = lambda c1, c2: c1._hsl == c2._hsl\ndef make_color_factory(**kwargs_defaults):\n    def ColorFactory(*args, **kwargs):\n        new_kwargs = kwargs_defaults.copy()\n        new_kwargs.update(kwargs)\n        return Color(*args, **new_kwargs)\n    return ColorFactory",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "HSL_equivalence",
        "kind": 5,
        "importPath": "parrot.utils.colour",
        "description": "parrot.utils.colour",
        "peekOfCode": "HSL_equivalence = lambda c1, c2: c1._hsl == c2._hsl\ndef make_color_factory(**kwargs_defaults):\n    def ColorFactory(*args, **kwargs):\n        new_kwargs = kwargs_defaults.copy()\n        new_kwargs.update(kwargs)\n        return Color(*args, **new_kwargs)\n    return ColorFactory",
        "detail": "parrot.utils.colour",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def clamp(n, min, max):\n    if n < min:\n        return min\n    elif n > max:\n        return max\n    else:\n        return n\ndef dmx_clamp(n):\n    if math.isnan(n):\n        return 0",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "dmx_clamp",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def dmx_clamp(n):\n    if math.isnan(n):\n        return 0\n    return int(clamp(n, 0, 255))\ndef dmx_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\nusb_path = \"/dev/cu.usbserial-EN419206\"\ndef get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "dmx_clamp_list",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def dmx_clamp_list(items):\n    return [int(clamp(item, 0, 255)) for item in items]\nusb_path = \"/dev/cu.usbserial-EN419206\"\ndef get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()\n    return Controller(usb_path)  # Typical of Linux",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "get_controller",
        "kind": 2,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "def get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()\n    return Controller(usb_path)  # Typical of Linux",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "usb_path",
        "kind": 5,
        "importPath": "parrot.utils.dmx_utils",
        "description": "parrot.utils.dmx_utils",
        "peekOfCode": "usb_path = \"/dev/cu.usbserial-EN419206\"\ndef get_controller():\n    if os.environ.get(\"MOCK_DMX\", False) != False:\n        return MockDmxController()\n    return Controller(usb_path)  # Typical of Linux",
        "detail": "parrot.utils.dmx_utils",
        "documentation": {}
    },
    {
        "label": "Lerpable",
        "kind": 6,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "class Lerpable:\n    def lerp(self, other, t):\n        raise NotImplementedError()\nclass LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject\n        self.target = None\n        self.duration = duration\n        self.start_time = None\n    def push(self, target):",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "LerpAnimator",
        "kind": 6,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "class LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject\n        self.target = None\n        self.duration = duration\n        self.start_time = None\n    def push(self, target):\n        self.target = target\n        self.start_time = time.time()\n    def render(self):",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp",
        "kind": 2,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "def lerp(a, b, t):\n    return a + (b - a) * t\ndef lerp_list(a, b, t):\n    return [lerp(i, j, t) for i, j in zip(a, b)]\nclass Lerpable:\n    def lerp(self, other, t):\n        raise NotImplementedError()\nclass LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "lerp_list",
        "kind": 2,
        "importPath": "parrot.utils.lerp",
        "description": "parrot.utils.lerp",
        "peekOfCode": "def lerp_list(a, b, t):\n    return [lerp(i, j, t) for i, j in zip(a, b)]\nclass Lerpable:\n    def lerp(self, other, t):\n        raise NotImplementedError()\nclass LerpAnimator:\n    def __init__(self, subject: Lerpable, duration: float):\n        self.subject = subject\n        self.target = None\n        self.duration = duration",
        "detail": "parrot.utils.lerp",
        "documentation": {}
    },
    {
        "label": "MockDmxController",
        "kind": 6,
        "importPath": "parrot.utils.mock_controller",
        "description": "parrot.utils.mock_controller",
        "peekOfCode": "class MockDmxController:\n    def __init__(self):\n        pass\n    def set_channel(self, channel, value):\n        pass\n    def submit(self):\n        pass",
        "detail": "parrot.utils.mock_controller",
        "documentation": {}
    },
    {
        "label": "patch_bay",
        "kind": 5,
        "importPath": "parrot.patch_bay",
        "description": "parrot.patch_bay",
        "peekOfCode": "patch_bay = [\n    ChauvetSpot160_12Ch(\n        patch=1,\n    ),\n    ChauvetSpot120_12Ch(\n        patch=140,\n    ),\n    LedPar(12),\n    LedPar(19),\n    LedPar(26),",
        "detail": "parrot.patch_bay",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "parrot.state",
        "description": "parrot.state",
        "peekOfCode": "class State:\n    def __init__(self):\n        self._phrase = Phrase.intro_outro\n    @property\n    def phrase(self):\n        return self._phrase\n    def set_phrase(self, value: Phrase):\n        self._phrase = value",
        "detail": "parrot.state",
        "documentation": {}
    }
]